<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuSoportePagoHorarioRepository extends EntityRepository {
    
    public function listaDql() {
        $dql   = "SELECT sph FROM BrasaRecursoHumanoBundle:RhuSoportePagoHorario sph WHERE sph.estadoCerrado = 0";
        return $dql;
    }
    
    public function generar($codigoSoportePagoHorario) {        
        $em = $this->getEntityManager();
        $arSoportePagoHorario = new \Brasa\RecursoHumanoBundle\Entity\RhuSoportePagoHorario();
        $arSoportePagoHorario = $em->getRepository('BrasaRecursoHumanoBundle:RhuSoportePagoHorario')->find($codigoSoportePagoHorario);
        $arContratos = $em->getRepository('BrasaRecursoHumanoBundle:RhuContrato')->contratosPeriodoCentroCosto($arSoportePagoHorario->getFechaDesde()->format('Y/m/d'), $arSoportePagoHorario->getFechaHasta()->format('Y/m/d'), $arSoportePagoHorario->getCodigoCentroCostoFk());
        foreach ($arContratos as $arContrato) {
            $fechaDesde = $arSoportePagoHorario->getFechaDesde();
            $fechaHasta = $arSoportePagoHorario->getFechaHasta();
            if($arContrato->getFechaDesde() > $fechaDesde) {
                $fechaDesde = $arContrato->getFechaDesde();
            }
            if($arContrato->getFechaHasta() < $fechaHasta && $arContrato->getIndefinido() == 0) {
                $fechaHasta = $arContrato->getFechaHasta();
            }
            
            
            $arSoportePagoHorarioDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuSoportePagoHorarioDetalle();
            $arSoportePagoHorarioDetalle->setSoportePagoHorarioRel($arSoportePagoHorario);
            $arSoportePagoHorarioDetalle->setEmpleadoRel($arContrato->getEmpleadorel());
            $arSoportePagoHorarioDetalle->setContratoRel($arContrato);
            $arSoportePagoHorarioDetalle->setFechaDesde($arSoportePagoHorario->getFechaDesde());
            $arSoportePagoHorarioDetalle->setFechaHasta($arSoportePagoHorario->getFechaHasta());            
            $arHorario = $arContrato->getEmpleadoRel()->getHorarioRel();               
            $arHorarioAccesos = $em->getRepository('BrasaRecursoHumanoBundle:RhuHorarioAcceso')->empleado($fechaDesde->format('Y/m/d'), $fechaHasta->format('Y/m/d'), $arContrato->getCodigoEmpleadoFk());                    
            $intHorasDiurnas = 0;   
            $arrHorasTotal = array(
                'horasDescanso' => 0,
                'horasDiurnas' => 0,
                'horasNocturnas' => 0,
                'horasFestivasDiurnas' => 0,
                'horasFestivasNocturnas' => 0,                
                'horasExtrasDiurnas' => 0,                
                'horasExtrasNocturnas' => 0,
                'horasExtrasFestivasDiurnas' => 0,
                'horasExtrasFestivasNocturnas' => 0);
            $dias = 0;
            $descansos = 0; 
            /*if($arContrato->getCodigoContratoPk() == 1) {
                echo "hola";
            }*/
            foreach ($arHorarioAccesos as $arHorarioAcceso) {                
                $arTurno = new \Brasa\RecursoHumanoBundle\Entity\RhuTurno();
                $arTurno = $em->getRepository('BrasaRecursoHumanoBundle:RhuTurno')->find($arHorarioAcceso->getCodigoTurnoFk());
                if($arTurno->getDescanso() == 1) {
                    $arrHorasTotal['horasDescanso'] = $arrHorasTotal['horasDescanso'] + $arTurno->getHorasDiurnas();
                    $descansos++;
                    $dias++;
                } else {
                    if($arHorarioAcceso->getEstadoEntrada() == 1 && $arHorarioAcceso->getEstadoSalida() == 1) {
                        $dias++;
                        $boolFestivo = 0;
                        $boolFestivo2 = 0;
                        $intMinutoInicio = (($arHorarioAcceso->getFechaEntrada()->format('i') * 100)/60)/100;
                        $intHoraInicio = $arHorarioAcceso->getFechaEntrada()->format('G');        
                        $intHoraInicio += $intMinutoInicio;
                        $intMinutoFinal = (($arHorarioAcceso->getFechaSalida()->format('i') * 100)/60)/100;
                        $intHoraFinal = $arHorarioAcceso->getFechaSalida()->format('G');
                        $intHoraFinal += $intMinutoFinal;
                        $diaSemana = $arHorarioAcceso->getFechaEntrada()->format('N');
                        $diaSemana2 = $arHorarioAcceso->getFechaSalida()->format('N');  
                        if($diaSemana == 7) {
                            $boolFestivo = 1;
                        }
                        if($diaSemana2 == 7) {
                            $boolFestivo2 = 1;
                        }        
                        $arrHoras1 = null;
                        if(($intHoraInicio + $intMinutoInicio) <= $intHoraFinal+$intMinutoFinal){  
                            $arrHoras = $this->turnoHoras($intHoraInicio, $intMinutoInicio, $intHoraFinal, $boolFestivo, 0, 0, 0,$arTurno->getHorasPausa());
                        } else {
                            $arrHoras = $this->turnoHoras($intHoraInicio, $intMinutoInicio, 24, $boolFestivo, 0, 0, 0, 0);
                            $arrHoras1 = $this->turnoHoras(0, 0, $intHoraFinal, $boolFestivo2, $arrHoras['horas'], 0, 0, 0);                 
                        }  
                        $arrHorasTotal['horasDescanso'] = $arrHorasTotal['horasDescanso'] + $arrHoras['horasDescanso'];
                        $arrHorasTotal['horasDiurnas'] = $arrHorasTotal['horasDiurnas'] + $arrHoras['horasDiurnas'];
                        $arrHorasTotal['horasNocturnas'] = $arrHorasTotal['horasNocturnas'] + $arrHoras['horasNocturnas'];
                        $arrHorasTotal['horasFestivasDiurnas'] = $arrHorasTotal['horasFestivasDiurnas'] + $arrHoras['horasFestivasDiurnas'];
                        $arrHorasTotal['horasFestivasNocturnas'] = $arrHorasTotal['horasFestivasNocturnas'] + $arrHoras['horasFestivasNocturnas'];                        
                        $arrHorasTotal['horasExtrasDiurnas'] = $arrHorasTotal['horasExtrasDiurnas'] + $arrHoras['horasExtrasDiurnas'];
                        $arrHorasTotal['horasExtrasNocturnas'] = $arrHorasTotal['horasExtrasNocturnas'] + $arrHoras['horasExtrasNocturnas'];
                        $arrHorasTotal['horasExtrasFestivasDiurnas'] = $arrHorasTotal['horasExtrasFestivasDiurnas'] + $arrHoras['horasExtrasFestivasDiurnas'];
                        $arrHorasTotal['horasExtrasFestivasNocturnas'] = $arrHorasTotal['horasExtrasFestivasNocturnas'] + $arrHoras['horasExtrasFestivasNocturnas'];                        
                        if($arrHoras1 != null) {
                            $arrHorasTotal['horasDescanso'] = $arrHorasTotal['horasDescanso'] + $arrHoras1['horasDescanso'];
                            $arrHorasTotal['horasDiurnas'] = $arrHorasTotal['horasDiurnas'] + $arrHoras1['horasDiurnas'];
                            $arrHorasTotal['horasNocturnas'] = $arrHorasTotal['horasNocturnas'] + $arrHoras1['horasNocturnas'];
                            $arrHorasTotal['horasFestivasDiurnas'] = $arrHorasTotal['horasFestivasDiurnas'] + $arrHoras1['horasFestivasDiurnas'];
                            $arrHorasTotal['horasFestivasNocturnas'] = $arrHorasTotal['horasFestivasNocturnas'] + $arrHoras1['horasFestivasNocturnas'];                                                    
                            $arrHorasTotal['horasExtrasDiurnas'] = $arrHorasTotal['horasExtrasDiurnas'] + $arrHoras1['horasExtrasDiurnas'];
                            $arrHorasTotal['horasExtrasNocturnas'] = $arrHorasTotal['horasExtrasNocturnas'] + $arrHoras1['horasExtrasNocturnas'];                            
                            $arrHorasTotal['horasExtrasFestivasDiurnas'] = $arrHorasTotal['horasExtrasFestivasDiurnas'] + $arrHoras1['horasExtrasFestivasDiurnas'];
                            $arrHorasTotal['horasExtrasFestivasNocturnas'] = $arrHorasTotal['horasExtrasFestivasNocturnas'] + $arrHoras1['horasExtrasFestivasNocturnas'];                                                    
                        }
                    }                                   
                }                
            }           
            $intHorasPermiso = $em->getRepository('BrasaRecursoHumanoBundle:RhuPermiso')->horasPermisoPeriodo($fechaDesde->format('Y/m/d'), $fechaHasta->format('Y/m/d'), $arContrato->getCodigoEmpleadoFk());
            $incapacidad = $em->getRepository('BrasaRecursoHumanoBundle:RhuIncapacidad')->diasIncapacidadPeriodo($fechaDesde, $fechaHasta, $arContrato->getCodigoEmpleadoFk());
            $licencia = $em->getRepository('BrasaRecursoHumanoBundle:RhuLicencia')->diasLicenciaPeriodo($fechaDesde, $fechaHasta, $arContrato->getCodigoEmpleadoFk());
            //$vacacion = $em->getRepository('BrasaRecursoHumanoBundle:RhuVacacion')->dias($arContrato->getCodigoEmpleadoFk(), $arContrato->getCodigoContratoPk(), $fechaDesde, $fechaHasta);
            $intHoras = $arrHorasTotal['horasDescanso'] + $arrHorasTotal['horasDiurnas'] + $arrHorasTotal['horasNocturnas'] + $arrHorasTotal['horasFestivasDiurnas'] + $arrHorasTotal['horasFestivasNocturnas'] + $arrHorasTotal['horasExtrasDiurnas'] + $arrHorasTotal['horasExtrasNocturnas'];
            $intHoras += $intHorasPermiso;
            $novedad = $incapacidad + $licencia + $vacacion;
            $horasNovedad = ($incapacidad + $licencia + $vacacion) * 8;
            $intHoras += $horasNovedad;
            $dias += $novedad;
            $arSoportePagoHorarioDetalle->setIncapacidad($incapacidad);
            $arSoportePagoHorarioDetalle->setLicencia($licencia);
            $arSoportePagoHorarioDetalle->setVacacion($vacacion);            
            $arSoportePagoHorarioDetalle->setHoras($intHoras);
            $arSoportePagoHorarioDetalle->setHorasDescanso($arrHorasTotal['horasDescanso']);
            $arSoportePagoHorarioDetalle->setHorasPermiso($intHorasPermiso);
            $arSoportePagoHorarioDetalle->setHorasNovedad($horasNovedad);
            $arSoportePagoHorarioDetalle->setHorasDiurnas($arrHorasTotal['horasDiurnas']);
            $arSoportePagoHorarioDetalle->setHorasNocturnas($arrHorasTotal['horasNocturnas']);
            $arSoportePagoHorarioDetalle->setHorasFestivasDiurnas($arrHorasTotal['horasFestivasDiurnas']);
            $arSoportePagoHorarioDetalle->setHorasFestivasNocturnas($arrHorasTotal['horasFestivasNocturnas']);            
            $arSoportePagoHorarioDetalle->setHorasExtrasOrdinariasDiurnas($arrHorasTotal['horasExtrasDiurnas']);
            $arSoportePagoHorarioDetalle->setHorasExtrasOrdinariasNocturnas($arrHorasTotal['horasExtrasNocturnas']);                        
            $arSoportePagoHorarioDetalle->setHorasExtrasFestivasDiurnas($arrHorasTotal['horasExtrasFestivasDiurnas']);
            $arSoportePagoHorarioDetalle->setHorasExtrasFestivasNocturnas($arrHorasTotal['horasExtrasFestivasNocturnas']);                                    
            $arSoportePagoHorarioDetalle->setDescanso($descansos);  
            $arSoportePagoHorarioDetalle->setDias($dias);
            $em->persist($arSoportePagoHorarioDetalle);
        }        
        $arSoportePagoHorario->setEstadoGenerado(1);
        $em->persist($arSoportePagoHorario);
        $em->flush();
    }    
 
    private function turnoHoras($intHoraInicio, $intMinutoInicio, $intHoraFinal, $boolFestivo, $intHoras, $boolNovedad = 0, $boolDescanso = 0, $horasPausa) {        
        if($boolNovedad == 0) {
            $intHorasNocturnas = $this->calcularTiempo($intHoraInicio, $intHoraFinal, 0, 6);        
            $intHorasExtrasNocturnas = 0;
            $intTotalHoras = $intHorasNocturnas + $intHoras;
            if($intTotalHoras > 8) {
                $intHorasJornada = 8 - $intHoras;
                if($intHorasJornada >= 1) {
                    $intHorasNocturnasReales = $intHorasNocturnas - $intHorasJornada;
                    $intHorasNocturnas = $intHorasNocturnas - $intHorasNocturnasReales;
                    $intHorasExtrasNocturnas = $intHorasNocturnasReales;
                } else {
                    $intHorasExtrasNocturnas = $intHorasNocturnas;
                    $intHorasNocturnas = 0;
                }
            }

            $intHorasDiurnas = $this->calcularTiempo($intHoraInicio, $intHoraFinal, 6, 22);            
            $intHorasDiurnas -= $horasPausa;
            $intHorasExtrasDiurnas = 0;
            $intTotalHoras = $intHoras + $intHorasNocturnas + $intHorasExtrasNocturnas + $intHorasDiurnas;
            if($intTotalHoras > 8) {
                $intHorasJornada = 8 - ($intHoras + $intHorasNocturnas + $intHorasExtrasNocturnas);                    
                if($intHorasJornada > 1) {
                    $intHorasDiurnasReales = $intHorasDiurnas - $intHorasJornada;
                    $intHorasDiurnas = $intHorasDiurnas - $intHorasDiurnasReales;
                    $intHorasExtrasDiurnas = $intHorasDiurnasReales;
                } else {
                    $intHorasExtrasDiurnas = $intHorasDiurnas;
                    $intHorasDiurnas = 0;
                }            
            }

            $intHorasNocturnasNoche = $this->calcularTiempo($intHoraInicio, $intHoraFinal, 22, 24); 
            $intHorasExtrasNocturnasNoche = 0;
            $intTotalHoras = $intHorasDiurnas + $intHorasExtrasDiurnas + $intHorasNocturnas + $intHorasNocturnasNoche;                                        
            if($intTotalHoras > 8) {                    
                $intHorasJornada = 8 - ($intHorasNocturnas + $intHorasDiurnas + $intHorasExtrasDiurnas);                    
                if($intHorasJornada > 1) {
                    $intHorasNocturnasNocheReales = $intHorasNocturnasNoche - $intHorasJornada;
                    $intHorasNocturnasNoche = $intHorasNocturnasNoche - $intHorasNocturnasNocheReales;
                    $intHorasExtrasNocturnasNoche = $intHorasNocturnasNocheReales;                        
                } else {
                    $intHorasExtrasNocturnasNoche = $intHorasNocturnasNoche;
                    $intHorasNocturnasNoche = 0;
                }
            }
            $intHorasNocturnas += $intHorasNocturnasNoche;        
            $intHorasExtrasNocturnas += $intHorasExtrasNocturnasNoche;

            $intHorasFestivasDiurnas = 0;
            $intHorasFestivasNocturnas = 0;
            $intHorasExtrasFestivasDiurnas = 0;
            $intHorasExtrasFestivasNocturnas = 0;
            if($boolFestivo == 1) {
                $intHorasFestivasDiurnas = $intHorasDiurnas;
                $intHorasDiurnas = 0;
                $intHorasFestivasNocturnas = $intHorasNocturnas;
                $intHorasNocturnas = 0;
                $intHorasExtrasFestivasDiurnas = $intHorasExtrasDiurnas;
                $intHorasExtrasDiurnas = 0;
                $intHorasExtrasFestivasNocturnas = $intHorasExtrasNocturnas;
                $intHorasExtrasNocturnas = 0;
            }                
            $intTotalHoras = $intHorasDiurnas+$intHorasNocturnas+$intHorasExtrasDiurnas+$intHorasExtrasNocturnas+$intHorasFestivasDiurnas+$intHorasFestivasNocturnas+$intHorasExtrasFestivasDiurnas+$intHorasExtrasFestivasNocturnas;            
            if($boolDescanso == 1) {                
                $arrHoras = array(
                    'horasDescanso' => $intTotalHoras,
                    'horasDiurnas' => 0, 
                    'horasNocturnas' => 0, 
                    'horasExtrasDiurnas' => 0, 
                    'horasExtrasNocturnas' => 0,
                    'horasFestivasDiurnas' => 0, 
                    'horasFestivasNocturnas' => 0, 
                    'horasExtrasFestivasDiurnas' => 0, 
                    'horasExtrasFestivasNocturnas' => 0,
                    'horas' => $intTotalHoras);                
            } else {
                $arrHoras = array(
                    'horasDescanso' => 0,
                    'horasDiurnas' => $intHorasDiurnas, 
                    'horasNocturnas' => $intHorasNocturnas, 
                    'horasExtrasDiurnas' => $intHorasExtrasDiurnas, 
                    'horasExtrasNocturnas' => $intHorasExtrasNocturnas,
                    'horasFestivasDiurnas' => $intHorasFestivasDiurnas, 
                    'horasFestivasNocturnas' => $intHorasFestivasNocturnas, 
                    'horasExtrasFestivasDiurnas' => $intHorasExtrasFestivasDiurnas, 
                    'horasExtrasFestivasNocturnas' => $intHorasExtrasFestivasNocturnas,
                    'horas' => $intTotalHoras);                
            }
            
        } else {
            $arrHoras = array(
                'horasDescanso' => 0,
                'horasDiurnas' => 0, 
                'horasNocturnas' => 0, 
                'horasExtrasDiurnas' => 0, 
                'horasExtrasNocturnas' => 0,
                'horasFestivasDiurnas' => 0, 
                'horasFestivasNocturnas' => 0, 
                'horasExtrasFestivasDiurnas' => 0, 
                'horasExtrasFestivasNocturnas' => 0,
                'horas' => 0);            
        }  
        
        return $arrHoras;
    }    
    
    private function calcularTiempo($intInicial, $intFinal, $intParametroInicio, $intParametroFinal) {
        $intHoras = 0;
        $intHoraIniciaTemporal = 0;
        $intHoraTerminaTemporal = 0;
        if($intInicial < $intParametroInicio) {
            $intHoraIniciaTemporal = $intParametroInicio;
        } else {
            $intHoraIniciaTemporal = $intInicial;
        }
        if($intFinal > $intParametroFinal) {
            if($intInicial > $intParametroFinal) {
                $intHoraTerminaTemporal = $intInicial;
            } else {
                $intHoraTerminaTemporal = $intParametroFinal;
            }
        } else {
            if($intFinal > $intParametroInicio) {
                $intHoraTerminaTemporal = $intFinal;
            } else {
                $intHoraTerminaTemporal = $intParametroInicio;
            }
        }
        $intHoras = $intHoraTerminaTemporal - $intHoraIniciaTemporal;
        return $intHoras;
    }    
    
    public function eliminar($arrSeleccionados) {
        $em = $this->getEntityManager();
        if(count($arrSeleccionados) > 0) {
            foreach ($arrSeleccionados AS $codigo) {
                $ar = $em->getRepository('BrasaRecursoHumanoBundle:RhuSoportePagoHorario')->find($codigo);
                if($ar->getEstadoGenerado() == 0) {
                    $em->remove($ar);
                }                
            }
            $em->flush();
        }
    }         
}