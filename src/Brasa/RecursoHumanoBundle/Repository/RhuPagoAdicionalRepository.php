<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuPagoAdicionalRepository extends EntityRepository {
    
    public function listaDql($codigoProgramacionPago, $codigoEmpleado = "") {
        $em = $this->getEntityManager();
        $dql   = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa WHERE pa.codigoProgramacionPagoFk =  " . $codigoProgramacionPago . " AND pa.permanente = 0";
        if($codigoEmpleado != "") {
            $dql .= " AND pa.codigoEmpleadoFk = " . $codigoEmpleado;
        }        
        $dql .= " ORDER BY pa.codigoPagoAdicionalPk DESC";
        return $dql;
    } 
    
    public function listaEmpleadoDql($codigoEmpleado = "") {
        $em = $this->getEntityManager();
        $dql   = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa WHERE pa.codigoEmpleadoFk =  " . $codigoEmpleado ;        
        $dql .= " ORDER BY pa.codigoPagoAdicionalPk DESC";
        return $dql;
    }    
    
    public function listaTiempoDql($codigoProgramacionPago) {
        $em = $this->getEntityManager();
        $dql   = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa WHERE pa.codigoProgramacionPagoFk =  " . $codigoProgramacionPago . " AND pa.permanente = 0 AND pa.tipoAdicional = 4 ";
        $dql .= " ORDER BY pa.codigoProgramacionPagoFk DESC";
        return $dql;
    } 
    
    public function listaValorDql($codigoProgramacionPago, $codigoEmpleado = "") {
        $em = $this->getEntityManager();
        $dql   = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa WHERE pa.codigoProgramacionPagoFk =  " . $codigoProgramacionPago . " AND pa.permanente = 0 AND pa.tipoAdicional <> 4 ";
        if($codigoEmpleado != "") {
            $dql .= " AND pa.codigoEmpleadoFk = " . $codigoEmpleado;
        }
        $dql .= " ORDER BY pa.codigoPagoAdicionalPk DESC";
        return $dql;
    } 
        
    public function listaAdicionalesDql($strIdentificacion = "", $aplicarDiaLaborado = "", $codigoCentroCosto = "", $codigoPagoConcepto = "", $estadoInactivo = "", $modalidad = "", $periodo = "", $strFechaDesde = "", $strFechaHasta = "") {        
        $em = $this->getEntityManager();
        $dql   = "SELECT pa,e FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa JOIN pa.empleadoRel e WHERE pa.codigoPagoAdicionalPk <> 0 ";   
        if($periodo != "" && $periodo != '0') {
            $dql .= " AND pa.codigoPeriodoFk = " . $periodo;
        } 
        if($modalidad != "" ) {
            $dql .= " AND pa.modalidad = " . $modalidad;
        }        
        if($strIdentificacion != "" ) {
            $dql .= " AND e.numeroIdentificacion LIKE '%" . $strIdentificacion . "%'";
        }
        if($aplicarDiaLaborado == 1 ) {
            $dql .= " AND pa.aplicaDiaLaborado = 1";
        }
        if($aplicarDiaLaborado == '0' ) {
            $dql .= " AND pa.aplicaDiaLaborado = 0";
        }
        if($codigoCentroCosto) {
            if($codigoCentroCosto != '0')  {
                $dql .= " AND e.codigoCentroCostoFk = " . $codigoCentroCosto;                
            }            
        }
        if($codigoPagoConcepto) {
            if($codigoPagoConcepto != '0') {
                $dql .= " AND pa.codigoPagoConceptoFk = " . $codigoPagoConcepto;
            }            
        }
        if($estadoInactivo == 1 ) {
            $dql .= " AND pa.estadoInactivo = 1";
        }
        if($estadoInactivo == '0' ) {
            $dql .= " AND pa.estadoInactivo = 0";
        }   
        if($strFechaDesde != "" || $strFechaDesde != 0){
            $dql .= " AND pa.fecha >= '" . $strFechaDesde . "'";
        }
        if($strFechaHasta != "" || $strFechaHasta != 0) {
            $dql .= " AND pa.fecha <= '" . $strFechaHasta . "'";
        }
        $dql .= " ORDER BY pa.codigoPagoAdicionalPk DESC";
        return $dql;
    }
    
    public function listaConsultaDql($strNombre = "", $strIdentificacion = "", $codigoCentroCosto = "", $aplicaDiaLaborado) {        
        $em = $this->getEntityManager();
        $dql   = "SELECT pa,e FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa JOIN pa.empleadoRel e WHERE pa.codigoPagoAdicionalPk <> 0 AND pa.permanente = 0 ";   
        if($strNombre != "" ) {
            $dql .= " AND e.nombreCorto LIKE '%" . $strNombre . "%'";
        }
        if($strIdentificacion != "" ) {
            $dql .= " AND e.numeroIdentificacion LIKE '%" . $strIdentificacion . "%'";
        }
        if($codigoCentroCosto != "" || $codigoCentroCosto != 0 ) {
            $dql .= " AND e.codigoCentroCostoFk = " . $codigoCentroCosto;
        }
        
        if($aplicaDiaLaborado == 1 ) {
            $dql .= " AND pa.aplicaDiaLaborado = 1";
        }
        if($aplicaDiaLaborado == '0' ) {
            $dql .= " AND pa.aplicaDiaLaborado = 0";
        }
        return $dql;
    }
    
    public function programacionPago($codigoEmpleado = "", $fechaDesde, $fechaHasta) {
        $em = $this->getEntityManager();
        $dql = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa "
                . "WHERE (((pa.fecha >= '$fechaDesde' AND pa.fecha <= '$fechaHasta') AND pa.modalidad = 2) OR pa.modalidad = 1) AND pa.estadoInactivo = 0 AND pa.codigoEmpleadoFk = $codigoEmpleado";
        $objQuery = $em->createQuery($dql);  
        $arPagosAdicionales = $objQuery->getResult();         
        return $arPagosAdicionales;
    } 
    
    public function programacionPagoDql($codigoEmpleado = "", $fechaDesde, $fechaHasta) {
        $em = $this->getEntityManager();
        $dql = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa "
                . "WHERE (((pa.fecha >= '$fechaDesde' AND pa.fecha <= '$fechaHasta') AND pa.modalidad = 2) OR pa.modalidad = 1) AND pa.estadoInactivo = 0 AND pa.codigoEmpleadoFk = $codigoEmpleado";        
        return $dql;
    }
    
    public function programacionPagoGeneralDql($codigoEmpleado = "", $fechaDesde, $fechaHasta) {
        $em = $this->getEntityManager();
        $dql = "SELECT pa FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa "
                . "WHERE (((pa.fecha >= '$fechaDesde' AND pa.fecha <= '$fechaHasta') AND pa.modalidad = 2) OR pa.modalidad = 1) AND pa.codigoEmpleadoFk = $codigoEmpleado";        
        return $dql;
    }    
    
    public function bonificacionNoPrestacional($codigoEmpleado, $codigoProgramacionPago) {
        $em = $this->getEntityManager();
        $dql   = "SELECT SUM(pa.valor) as valor FROM BrasaRecursoHumanoBundle:RhuPagoAdicional pa "
               . "WHERE (pa.codigoProgramacionPagoFk = $codigoProgramacionPago OR pa.permanente = 1) AND pa.codigoEmpleadoFk = $codigoEmpleado AND pa.prestacional = 0 AND pa.tipoAdicional = 1";
        $query = $em->createQuery($dql);
        $arrayResultado = $query->getResult();
        $floValor = $arrayResultado[0]['valor'];
        return $floValor;
    } 

    public function eliminarTodoAdicionalesTiempo($codigoProgramacionPago) {
        $em = $this->getEntityManager();
        $arAdicionalesPago = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoAdicional();
        $arAdicionalesPago = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoAdicional')->findBy(array('codigoProgramacionPagoFk' => $codigoProgramacionPago));
        if ($arAdicionalesPago <> null){
            $strSql = "DELETE FROM rhu_pago_adicional WHERE codigo_programacion_pago_fk = " . $codigoProgramacionPago . " AND tipo_adicional = 4 ";
            $em->getConnection()->executeQuery($strSql);
            //$em->persist($arProgramacionPagoDetalle);
            //$em->flush();
            return true;
        }    
    }
    
    public function eliminarTodoAdicionalesValor($codigoProgramacionPago) {
        $em = $this->getEntityManager();
        $arAdicionalesPago = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoAdicional();
        $arAdicionalesPago = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoAdicional')->findBy(array('codigoProgramacionPagoFk' => $codigoProgramacionPago));
        if ($arAdicionalesPago <> null){
            $strSql = "DELETE FROM rhu_pago_adicional WHERE codigo_programacion_pago_fk = " . $codigoProgramacionPago. " AND tipo_adicional <> 4 ";
            $em->getConnection()->executeQuery($strSql);
            //$em->persist($arProgramacionPagoDetalle);
            //$em->flush();
            return true;
        }    
    }
}