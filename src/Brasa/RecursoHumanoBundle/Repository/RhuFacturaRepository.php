<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuFacturaRepository extends EntityRepository {
    
    public function listaDql($strCodigoTercero = "", $strCodigoCentroCosto = "", $strNumero = "", $strDesde = "", $strHasta = "") {        
        $em = $this->getEntityManager();
        $dql   = "SELECT f, t FROM BrasaRecursoHumanoBundle:RhuFactura f JOIN f.terceroRel t WHERE f.codigoFacturaPk <> 0";
        if($strCodigoTercero != "") {
            $dql .= " AND f.codigoTerceroFk = " . $strCodigoTercero;
        }
        if($strCodigoCentroCosto != "") {
            $dql .= " AND f.codigoCentroCostoFk = " . $strCodigoCentroCosto;
        }           
        if($strNumero != "" ) {
            $dql .= " AND f.numero = '" . $strNumero . "'";
        }
        if ($strDesde != ""){
            $dql .= " AND f.fecha >='" . $strDesde . "'";
        }
        if($strHasta != "") {
            $dql .= " AND f.fecha <='" . $strHasta . "'";
        }
        $dql .= " ORDER BY f.codigoFacturaPk DESC";
        return $dql;
    }
    
    public function liquidar($codigoFactura) {        
        $em = $this->getEntityManager();
        $arConfiguraciones = new \Brasa\GeneralBundle\Entity\GenConfiguracion();
        $arConfiguraciones = $em->getRepository('BrasaGeneralBundle:GenConfiguracion')->find(1);
        $arConfiguracionNomina = new \Brasa\RecursoHumanoBundle\Entity\RhuConfiguracion();
        $arConfiguracionNomina = $em->getRepository('BrasaRecursoHumanoBundle:RhuConfiguracion')->find(1);
        $arFactura = new \Brasa\RecursoHumanoBundle\Entity\RhuFactura();
        $arFactura = $em->getRepository('BrasaRecursoHumanoBundle:RhuFactura')->find($codigoFactura);         
        $arFacturaDetalles = new \Brasa\RecursoHumanoBundle\Entity\RhuFacturaDetalle();
        $arFacturaDetalles = $em->getRepository('BrasaRecursoHumanoBundle:RhuFacturaDetalle')->findBy(array('codigoFacturaFk' => $codigoFactura));
        $douAdministracion = 0;
        $douIngresoMision = 0;
        foreach ($arFacturaDetalles as $arFacturaDetalle) {
            $douAdministracion += $arFacturaDetalle->getVrAdministracion();
            $douIngresoMision += $arFacturaDetalle->getVrCosto();
        }
        $floTotalExamenes = 0;
        $floTotalSelecciones = 0;
        $arExamenes = new \Brasa\RecursoHumanoBundle\Entity\RhuExamen();
        $arExamenes = $em->getRepository('BrasaRecursoHumanoBundle:RhuExamen')->findBy(array('codigoFacturaFk' => $codigoFactura));                
        foreach ($arExamenes as $arExamen) {
            $floTotalExamenes += $arExamen->getVrTotal();
        }
        $arSelecciones = new \Brasa\RecursoHumanoBundle\Entity\RhuSeleccion();
        $arSelecciones = $em->getRepository('BrasaRecursoHumanoBundle:RhuSeleccion')->findBy(array('codigoFacturaFk' => $codigoFactura));                                
        foreach ($arSelecciones as $arSeleccion) {
            $floTotalSelecciones += $arSeleccion->getVrServicio();
        }        
        
        $douTotalBruto = $douIngresoMision + $douAdministracion;
        $douBaseAIU = (($douTotalBruto)*10)/100;
        $douRetencionFuente = 0;
        $douRetencionCREE = ($douBaseAIU * $arConfiguraciones->getPorcentajeRetencionCREE()) / 100;
        $douIva = ($douBaseAIU * $arConfiguracionNomina->getPorcentajeIva()) / 100;
        $douRetencionIva = ($douIva * $arConfiguraciones->getPorcentajeRetencionIvaVentas()) / 100;        
        if($arFactura->getTerceroRel()->getRetencionFuenteVentas() == 1) {
            if ($douBaseAIU >= $arConfiguraciones->getBaseRetencionFuente()) {
                $douRetencionFuente = ($douBaseAIU * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
            }            
        }
        $arFactura->setVrBaseAIU($douBaseAIU);
        $arFactura->setVrIngresoMision($douIngresoMision);
        $arFactura->setVrTotalAdministracion($douAdministracion);
        $arFactura->setVrBruto($douTotalBruto);        
        $arFactura->setVrRetencionFuente($douRetencionFuente);
        $arFactura->setVrRetencionCree($douRetencionCREE);
        $arFactura->setVrIva($douIva);
        $arFactura->setVrRetencionIva($douRetencionIva);    
        $arFactura->setVrSeleccion($floTotalSelecciones);
        $arFactura->setVrExamen($floTotalExamenes);
        $douRetenciones = $douRetencionIva + $douRetencionFuente;
        $arFactura->setVrNeto($douTotalBruto+$douIva-$douRetenciones);
        $em->persist($arFactura);
        $em->flush();
        return true;
    }        
}