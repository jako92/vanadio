<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuCobroRepository extends EntityRepository {

    public function listaDql($strCodigoCliente="",$strCodigoCentroCosto="",$strDesde = "",$strHasta = "", $boolEstadoAutorizado = "", $boolEstadoFacturado = "") {
        $dql = "SELECT c FROM BrasaRecursoHumanoBundle:RhuCobro c WHERE c.codigoCobroPk <> 0";
        if($strCodigoCliente != "") {
            $dql .= " AND c.codigoClienteFk = " . $strCodigoCliente;
        }
        if($strCodigoCentroCosto != "") {
            $dql .= " AND c.codigoCentroCostoFk = " . $strCodigoCentroCosto;
        }
        if ($strDesde != ""){
            $dql .= " AND c.fecha >='" . $strDesde . "'";
        }
        if($strHasta != "") {
            $dql .= " AND c.fecha <='" . $strHasta . "'";
        }
        if($boolEstadoAutorizado == 1 ) {
            $dql .= " AND c.estadoAutorizado = 1";
        }
        if($boolEstadoAutorizado == 0) {
            $dql .= " AND c.estadoAutorizado = 0";
        }
        if($boolEstadoFacturado == 1 ) {
            $dql .= " AND c.estadoFacturado = 1";
        }
        if($boolEstadoFacturado == 0) {
            $dql .= " AND c.estadoFacturado = 0";
        }   
        $dql .= " ORDER BY c.codigoCobroPk DESC";
        return $dql;
    }

    public function liquidar($codigoCobro) {
        $em = $this->getEntityManager();
        $numeroRegistros = 0;
        $basico = 0;
        $prestacional = 0;
        $noPrestacional = 0;
        $auxilioTransporte = 0;
        $pension = 0;
        $salud = 0;
        $riesgos = 0;
        $caja = 0;
        $sena = 0;
        $icbf = 0;
        $prestaciones = 0;
        $vacaciones = 0;
        $aporteParafiscales = 0;
        $operacion = 0;
        $administracion = 0;
        $totalExamen = 0;
        $totalSeleccion = 0;
        $totalVisita = 0;
        $totalPrueba = 0;
        $totalPoligrafia = 0;
        $totalIncapacidad = 0;
        $totalCobro = 0;
        $arServiciosCobrar = new \Brasa\RecursoHumanoBundle\Entity\RhuServicioCobrar();
        $arServiciosCobrar = $em->getRepository('BrasaRecursoHumanoBundle:RhuServicioCobrar')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arServiciosCobrar as $arServicioCobrar) {
            $basico += $arServicioCobrar->getVrSalario();
            $prestacional += $arServicioCobrar->getVrPrestacional();
            $noPrestacional += $arServicioCobrar->getVrNoPrestacional();
            $auxilioTransporte += $arServicioCobrar->getVrAuxilioTransporte();
            $pension += $arServicioCobrar->getVrPension();
            $salud += $arServicioCobrar->getVrSalud();
            $riesgos += $arServicioCobrar->getVrRiesgos();
            $caja += $arServicioCobrar->getVrCaja();
            $sena += $arServicioCobrar->getVrSena();
            $icbf += $arServicioCobrar->getVrIcbf();
            $prestaciones += $arServicioCobrar->getVrPrestaciones();
            $vacaciones += $arServicioCobrar->getVrVacaciones();
            $aporteParafiscales += $arServicioCobrar->getVrAporteParafiscales();
            $operacion += $arServicioCobrar->getVrOperacion();
            $administracion += $arServicioCobrar->getVrAdministracion();
            $totalCobro += $arServicioCobrar->getVrTotalCobro();
            $numeroRegistros++;
        }
        $arExamenes = new \Brasa\RecursoHumanoBundle\Entity\RhuExamen();
        $arExamenes = $em->getRepository('BrasaRecursoHumanoBundle:RhuExamen')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arExamenes as $arExamen){
            $totalExamen += $arExamen->getVrTotal();
            $totalCobro += $arExamen->getVrTotal();
            $numeroRegistros++;
        }
        $arSelecciones = new \Brasa\RecursoHumanoBundle\Entity\RhuSeleccion();
        $arSelecciones = $em->getRepository('BrasaRecursoHumanoBundle:RhuSeleccion')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arSelecciones as $arSeleccion){
            $totalSeleccion += $arSeleccion->getVrServicio();
            $totalCobro += $arSeleccion->getVrServicio();
            $numeroRegistros++;
        }
        $arVisitas = new \Brasa\RecursoHumanoBundle\Entity\RhuVisita();
        $arVisitas = $em->getRepository('BrasaRecursoHumanoBundle:RhuVisita')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arVisitas as $arVisita){
            $totalVisita += $arVisita->getVrTotal();
            $totalCobro += $arVisita->getVrTotal();
            $numeroRegistros++;
        }
        $arPruebas = new \Brasa\RecursoHumanoBundle\Entity\RhuPrueba();
        $arPruebas = $em->getRepository('BrasaRecursoHumanoBundle:RhuPrueba')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arPruebas as $arPrueba){
            $totalPrueba += $arPrueba->getVrTotal();
            $totalCobro += $arPrueba->getVrTotal();
            $numeroRegistros++;
        }
        $arPoligrafias = new \Brasa\RecursoHumanoBundle\Entity\RhuPoligrafia();
        $arPoligrafias = $em->getRepository('BrasaRecursoHumanoBundle:RhuPoligrafia')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arPoligrafias as $arPoligrafia){
            $totalPoligrafia += $arPoligrafia->getVrTotal();
            $totalCobro += $arPoligrafia->getVrTotal();
            $numeroRegistros++;
        }
        $arIncapacidades = new \Brasa\RecursoHumanoBundle\Entity\RhuIncapacidad();
        $arIncapacidades = $em->getRepository('BrasaRecursoHumanoBundle:RhuIncapacidad')->findBy(array('codigoCobroFk' => $codigoCobro));
        foreach ($arIncapacidades as $arIncapacidad){
            $totalIncapacidad += $arIncapacidad->getVrCobro();
            $totalCobro += $arIncapacidad->getVrIncapacidad();
            $numeroRegistros++;
        }
        $arCobro = $em->getRepository('BrasaRecursoHumanoBundle:RhuCobro')->find($codigoCobro);
        $arCobro->setVrBasico($basico);
        $arCobro->setVrPrestacional($prestacional);
        $arCobro->setVrNoPrestacional($noPrestacional);
        $arCobro->setVrAuxilioTransporte($auxilioTransporte);
        $arCobro->setVrPension($pension);
        $arCobro->setVrSalud($salud);
        $arCobro->setVrRiesgos($riesgos);
        $arCobro->setVrCaja($caja);
        $arCobro->setVrSena($sena);
        $arCobro->setVrIcbf($icbf);
        $arCobro->setVrPrestaciones($prestaciones);
        $arCobro->setVrVacaciones($vacaciones);
        $arCobro->setVrAporteParafiscales($aporteParafiscales);
        $arCobro->setVrOperacion($operacion);
        $arCobro->setVrAdministracion($administracion);
        $arCobro->setVrExamen($totalExamen);
        $arCobro->setVrSeleccion($totalSeleccion);
        $arCobro->setVrVisita($totalVisita);
        $arCobro->setVrPrueba($totalPrueba);
        $arCobro->setVrPoligrafia($totalPoligrafia);
        $arCobro->setVrIncapacidad(round($totalIncapacidad));
        $totalCobro += $arCobro->getVrAjuste();
        $arCobro->setvrTotalCobro(round($totalCobro));
        $arCobro->setNumeroRegistros($numeroRegistros);
        $em->persist($arCobro);
        $em->flush();
        return true;
    }

    public function pendienteCobrar($codigoCliente) {
        $em = $this->getEntityManager();
        $dql = "SELECT c FROM BrasaRecursoHumanoBundle:RhuCobro c WHERE c.estadoCobrado = 0 "
                . " AND c.codigoClienteFk = " . $codigoCliente;
        return $dql;
    }
    
    public function autorizar($codigoCobro) {
        $em = $this->getEntityManager();
        $arCobro = new \Brasa\RecursoHumanoBundle\Entity\RhuCobro();
        $arCobro = $em->getRepository('BrasaRecursoHumanoBundle:RhuCobro')->find($codigoCobro);
        $strResultado = "";
        if($arCobro->getEstadoAutorizado() == 0) {
                $arCobro->setEstadoAutorizado(1);
                $em->persist($arCobro);
                $em->flush();
        } else {
            $strResultado = "Ya esta autorizado";
        }
        return $strResultado;
    }
    
    public function desAutorizar($codigoCobro) {
        $em = $this->getEntityManager();
        $arCobro = $em->getRepository('BrasaRecursoHumanoBundle:RhuCobro')->find($codigoCobro);
        $strResultado = "";
        if($arCobro->getEstadoAutorizado() == 1) {
            if($arCobro->getEstadoFacturado() == 1){
               $strResultado = "La relacion de cobro ya se encuentra facturada"; 
            }
            else{
            $arCobro->setEstadoAutorizado(0);
            $em->persist($arCobro);
            $em->flush();}
        } else {
            $strResultado = "La relacion de cobro debe estas autorizada y no puede estar anulada o impresa";
        }
        return $strResultado;
    }

}
