<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuProgramacionPagoDetalleRepository extends EntityRepository {
    
    public function listaDQL($codigoProgramacionPago = "") {        
        $em = $this->getEntityManager();
        $dql   = "SELECT pd FROM BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalle pd WHERE pd.codigoProgramacionPagoDetallePk <> 0" ;
        if($codigoProgramacionPago != "" ) {
            $dql .= " AND pd.codigoProgramacionPagoFk = " . $codigoProgramacionPago;
        }             
        $dql .= " ORDER BY pd.codigoEmpleadoFk";
        return $dql;
    }      
    
    public function generarPago($arProgramacionPagoDetalle, $arProgramacionPagoProcesar, $arCentroCosto, $arConfiguracion, $guardar = 0) {                
        $em = $this->getEntityManager();
        $codigoPago = null;
        //Nomina
        if($arProgramacionPagoProcesar->getCodigoPagoTipoFk() == 1) {
            $arContrato = $arProgramacionPagoDetalle->getContratoRel();
            $arPago = new \Brasa\RecursoHumanoBundle\Entity\RhuPago();
            $arPago->setPagoTipoRel($arProgramacionPagoProcesar->getPagoTipoRel());                        
            $arPago->setEmpleadoRel($arProgramacionPagoDetalle->getEmpleadoRel());
            $arPago->setCentroCostoRel($arCentroCosto);
            $arPago->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
            $arPago->setFechaDesde($arProgramacionPagoProcesar->getFechaDesde());
            $arPago->setFechaHasta($arProgramacionPagoProcesar->getFechaHasta());
            $arPago->setFechaDesdePago($arProgramacionPagoDetalle->getFechaDesdePago());
            $arPago->setFechaHastaPago($arProgramacionPagoDetalle->getFechaHastaPago());
            $arPago->setVrSalarioEmpleado($arProgramacionPagoDetalle->getVrSalario());
            $arPago->setVrSalarioPeriodo($arProgramacionPagoDetalle->getVrDevengado());
            $arPago->setProgramacionPagoRel($arProgramacionPagoProcesar);
            $arPago->setContratoRel($arContrato);                        
            $arPago->setDiasPeriodo($arProgramacionPagoDetalle->getDias());
            $arPago->setCodigoUsuario($arProgramacionPagoProcesar->getCodigoUsuario());
            $arPago->setComentarios($arProgramacionPagoDetalle->getComentarios());
            $arPago->setCodigoSoportePagoFk($arProgramacionPagoDetalle->getCodigoSoportePagoFk());
            //Parametros generales
            $intHorasLaboradas = $arProgramacionPagoDetalle->getHorasPeriodoReales();      
            $horasDiurnas = $arProgramacionPagoDetalle->getHorasDiurnas();
            $intDiasTransporte = $arProgramacionPagoDetalle->getDiasReales(); 
            $intFactorDia = $arProgramacionPagoDetalle->getFactorDia();
            $douVrDia = $arProgramacionPagoDetalle->getVrDia();
            $douVrHora = $arProgramacionPagoDetalle->getVrHora();
            $douVrSalarioMinimo = $arConfiguracion->getVrSalario();
            $douVrHoraSalarioMinimo = ($douVrSalarioMinimo / 30) / 8;
            $douIngresoBasePrestacional = 0;
            $douIngresoBaseCotizacion = 0;  
            $devengado = 0;
            $devengadoPrestacional = 0;
            $salud = 0;
            $pension = 0;
            //Procesar vacaciones
            $intDiasVacaciones = $arProgramacionPagoDetalle->getDiasVacaciones();            
            $ibcVacaciones = $arProgramacionPagoDetalle->getIbcVacaciones();
            $ibcVacaciones = round($ibcVacaciones);
            if($intDiasVacaciones > 0) {                                
                $arPagoConcepto = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoConcepto')->find($arConfiguracion->getCodigoVacacion());
                $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                $arPagoDetalle->setPagoRel($arPago);
                $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);                                        
                $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());                
                $arPagoDetalle->setNumeroDias($intDiasVacaciones);
                $arPagoDetalle->setVrIngresoBasePrestacion($ibcVacaciones);
                $arPagoDetalle->setVrIngresoBaseCotizacion($ibcVacaciones);
                $em->persist($arPagoDetalle);                                         
            }                        

            //Procesar Incapacidades
            if($arProgramacionPagoDetalle->getEmpleadoRel()->getPagadoEntidadSalud() == 0) {
                $arIncapacidades = new \Brasa\RecursoHumanoBundle\Entity\RhuIncapacidad();
                $arIncapacidades = $em->getRepository('BrasaRecursoHumanoBundle:RhuIncapacidad')->periodo($arProgramacionPagoDetalle->getFechaDesdePago(), $arProgramacionPagoDetalle->getFechaHasta(), $arProgramacionPagoDetalle->getCodigoEmpleadoFk());                                                                        
                foreach ($arIncapacidades as $arIncapacidad) {             
                    $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                    $arPagoDetalle->setPagoRel($arPago);
                    $arPagoDetalle->setPagoConceptoRel($arIncapacidad->getIncapacidadTipoRel()->getPagoConceptoRel());

                    $fechaDesde = $arProgramacionPagoDetalle->getFechaDesdePago();
                    $fechaHasta = $arProgramacionPagoDetalle->getFechaHasta();
                    if($arIncapacidad->getFechaDesde() >  $fechaDesde) {
                        $fechaDesde = $arIncapacidad->getFechaDesde();
                    }             
                    if($arIncapacidad->getFechaHasta() < $fechaHasta) {
                        $fechaHasta = $arIncapacidad->getFechaHasta();                
                    }
                    $intDias = $fechaDesde->diff($fechaHasta);
                    $intDias = $intDias->format('%a');   
                    $intDias += 1;
                    $intHorasProcesarIncapacidad = $intDias * $intFactorDia;                                                                                                
                    $intHorasLaboradas = $intHorasLaboradas - $intHorasProcesarIncapacidad;                                
                    $douPagoDetalle = 0;
                    $douIngresoBaseCotizacionIncapacidad = 0;
                    $douIngresoBasePrestacionIncapacidad = 0;
                    $douIngresoBaseCotizacionIncapacidadControl = 0;
                    $intDiasTransporte = $intDiasTransporte - ($intHorasProcesarIncapacidad / $intFactorDia);

                    if($arIncapacidad->getIncapacidadTipoRel()->getTipo() == 1) {
                        if($arProgramacionPagoDetalle->getVrSalario() <= $douVrSalarioMinimo) {
                            $douPagoDetalle = $intHorasProcesarIncapacidad * $douVrHora;
                            $douIngresoBasePrestacionIncapacidad = $intHorasProcesarIncapacidad * $douVrHora;
                        }
                        if($arProgramacionPagoDetalle->getVrSalario() > $douVrSalarioMinimo && $arProgramacionPagoDetalle->getVrSalario() <= $douVrSalarioMinimo * 1.5) {
                            $douPagoDetalle = $intHorasProcesarIncapacidad * $douVrHoraSalarioMinimo;
                            $douIngresoBasePrestacionIncapacidad = $intHorasProcesarIncapacidad * $douVrHora;
                        }
                        if($arProgramacionPagoDetalle->getVrSalario() > ($douVrSalarioMinimo * 1.5)) {
                            $douPagoDetalle = $intHorasProcesarIncapacidad * $douVrHora;
                            $douPagoDetalle = ($douPagoDetalle * $arIncapacidad->getPorcentajePago())/100;
                            $douIngresoBasePrestacionIncapacidad = $intHorasProcesarIncapacidad * $douVrHora;
                        }                            
                    } else {
                        $douPagoDetalle = $intHorasProcesarIncapacidad * $douVrHora;
                        $douPagoDetalle = ($douPagoDetalle * $arIncapacidad->getPorcentajePago())/100;
                        $douIngresoBasePrestacionIncapacidad = $intHorasProcesarIncapacidad * $douVrHora;
                    }
                    $douIngresoBaseCotizacionIncapacidadControl = $douPagoDetalle;
                    if($arIncapacidad->getIncapacidadTipoRel()->getGeneraIbc() == 1) {
                        $douIngresoBaseCotizacionIncapacidad = $douPagoDetalle;
                    }
                    if($arIncapacidad->getIncapacidadTipoRel()->getGeneraPago() == 0) {
                        $douPagoDetalle = 0;
                    }
                    
                    $douPagoDetalle = round($douPagoDetalle);
                    $devengado += $douPagoDetalle;
                    $devengadoPrestacional += $douPagoDetalle;
                    $arPagoDetalle->setNumeroHoras($intHorasProcesarIncapacidad);
                    $arPagoDetalle->setNumeroDias($intDias);
                    $arPagoDetalle->setVrHora($douVrHora);
                    $arPagoDetalle->setDetalle($arIncapacidad->getIncapacidadDiagnosticoRel()->getNombre());
                    $arPagoDetalle->setVrDia($douVrDia);
                    $arPagoDetalle->setVrPago($douPagoDetalle);
                    $arPagoDetalle->setOperacion(1);
                    $arPagoDetalle->setVrPagoOperado($douPagoDetalle * 1);
                    $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                    $douIngresoBasePrestacional += $douIngresoBasePrestacionIncapacidad;                                        
                    $douIngresoBaseCotizacion  += $douIngresoBaseCotizacionIncapacidad;                                                                        
                    $arPagoDetalle->setVrIngresoBasePrestacion($douIngresoBasePrestacionIncapacidad);                                                                            
                    $arPagoDetalle->setVrIngresoBaseCotizacion($douIngresoBaseCotizacionIncapacidad); 
                    $arPagoDetalle->setVrIngresoBaseCotizacionIncapacidad($douIngresoBaseCotizacionIncapacidadControl);
                    $em->persist($arPagoDetalle);                                                                                                                                                                                                                      
                }                
            }

            //Procesar Licencias                                                
            $arLicencias = new \Brasa\RecursoHumanoBundle\Entity\RhuLicencia();
            $arLicencias = $em->getRepository('BrasaRecursoHumanoBundle:RhuLicencia')->periodo($arProgramacionPagoDetalle->getFechaDesdePago(), $arProgramacionPagoDetalle->getFechaHasta(), $arProgramacionPagoDetalle->getCodigoEmpleadoFk());
            foreach ($arLicencias as $arLicencia) {   
                $arPagoConcepto = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoConcepto();
                $arPagoConcepto = $arLicencia->getLicenciaTipoRel()->getPagoConceptoRel();
                $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                $arPagoDetalle->setPagoRel($arPago);
                $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);                                
                $fechaDesde = $arProgramacionPagoDetalle->getFechaDesdePago();
                $fechaHasta = $arProgramacionPagoDetalle->getFechaHasta();
                if($arLicencia->getFechaDesde() >  $fechaDesde) {
                    $fechaDesde = $arLicencia->getFechaDesde();
                }             
                if($arLicencia->getFechaHasta() < $fechaHasta) {
                    $fechaHasta = $arLicencia->getFechaHasta();                
                }
                $intDias = $fechaDesde->diff($fechaHasta);
                $intDias = $intDias->format('%a');
                $intDias += 1;
                $intHorasProcesarLicencia = $intDias * $intFactorDia;

                $intHorasLaboradas = $intHorasLaboradas - $intHorasProcesarLicencia;                                                                    
                $douPagoDetalle = $intHorasProcesarLicencia * $douVrHora;
                $douIngresoBasePrestacional = $douIngresoBasePrestacional + $douPagoDetalle;                                        
                $arPagoDetalle->setVrIngresoBasePrestacion($douPagoDetalle);                                                                    
                if($arPagoConcepto->getGeneraIngresoBaseCotizacion() == 1) {
                    $douIngresoBaseCotizacion += $douPagoDetalle;                                        
                    $arPagoDetalle->setVrIngresoBaseCotizacion($douPagoDetalle);
                }
                if($arLicencia->getLicenciaTipoRel()->getAusentismo() == 1) {
                    $arPagoDetalle->setDiasAusentismo($intDias);
                }
                if($arPagoConcepto->getOperacion() == 0) {
                    $douPagoDetalle = 0;
                }                                  
                $douPagoDetalle = round($douPagoDetalle);
                $devengado += $douPagoDetalle;
                $devengadoPrestacional += $douPagoDetalle;
                $arPagoDetalle->setVrPago($douPagoDetalle);
                $arPagoDetalle->setOperacion($arLicencia->getLicenciaTipoRel()->getPagoConceptoRel()->getOperacion());
                $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arLicencia->getLicenciaTipoRel()->getPagoConceptoRel()->getOperacion());                               
                $arPagoDetalle->setNumeroHoras($intHorasProcesarLicencia);
                $arPagoDetalle->setNumeroDias($intDias);
                $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);                                    
                $em->persist($arPagoDetalle);
                if($arLicencia->getAfectaTransporte() == 1){
                    $intDiasLicenciaProcesar = intval($intHorasProcesarLicencia / $intFactorDia);
                    $intDiasTransporte = $intDiasTransporte - $intDiasLicenciaProcesar;
                }                
            }

            //Procesar los conceptos de pagos adicionales
            $arPagosAdicionales = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoAdicional();
            $arPagosAdicionales = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoAdicional')->programacionPago($arProgramacionPagoDetalle->getCodigoEmpleadoFk(), $arProgramacionPagoProcesar->getFechaDesde()->format('Y/m/d'), $arProgramacionPagoProcesar->getFechaHasta()->format('Y/m/d'));
            foreach ($arPagosAdicionales as $arPagoAdicional) {
                $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                $arPagoDetalle->setPagoRel($arPago);
                $arPagoDetalle->setPagoConceptoRel($arPagoAdicional->getPagoConceptoRel());
                $arPagoDetalle->setAdicional(1);
                $douPagoDetalle = $arPagoAdicional->getValor();
                if($arPagoAdicional->getAplicaDiaLaborado() == 1) {                                                
                    $diasPeriodo = $arCentroCosto->getPeriodoPagoRel()->getDias();
                    $valorDia = $arPagoAdicional->getValor() / $diasPeriodo;
                    $douPagoDetalle = $valorDia * $arProgramacionPagoDetalle->getDias();
                }
                if($arPagoAdicional->getAplicaDiaLaboradoSinDescanso() == 1) {                                                
                    $diasPeriodo = $arCentroCosto->getPeriodoPagoRel()->getDias();
                    $valorDia = $arPagoAdicional->getValor() / $diasPeriodo;                                        
                    $douPagoDetalle = $valorDia * ($arProgramacionPagoDetalle->getDias() - ($arProgramacionPagoDetalle->getHorasDescanso() / 8));
                }                
                $douPagoDetalle = round($douPagoDetalle);
                if($arPagoAdicional->getPagoConceptoRel()->getOperacion() == 1) {
                    $devengado += $douPagoDetalle;
                    if($arPagoAdicional->getPagoConceptoRel()->getPrestacional() == 1) {
                        $devengadoPrestacional += $douPagoDetalle;
                    }
                }                
                $arPagoDetalle->setDetalle($arPagoAdicional->getDetalle());
                $arPagoDetalle->setVrPago($douPagoDetalle);
                $arPagoDetalle->setOperacion($arPagoAdicional->getPagoConceptoRel()->getOperacion());
                $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoAdicional->getPagoConceptoRel()->getOperacion());
                $arPagoDetalle->setDetalle($arPagoAdicional->getDetalle());
                $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);                            
                $douPagoDetalleOperado = $douPagoDetalle * $arPagoAdicional->getPagoConceptoRel()->getOperacion();
                
                if($arPagoAdicional->getPagoConceptoRel()->getPrestacional() == 1) {
                    if($arPagoAdicional->getPagoConceptoRel()->getGeneraIngresoBaseCotizacion() == 1) {
                        $douIngresoBaseCotizacion += $douPagoDetalleOperado;    
                        $arPagoDetalle->setVrIngresoBaseCotizacion($douPagoDetalleOperado);
                        $arPagoDetalle->setVrIngresoBaseCotizacionAdicional($douPagoDetalleOperado);
                        $arPagoDetalle->setCotizacion(1);
                    }
                    if($arPagoAdicional->getPagoConceptoRel()->getGeneraIngresoBasePrestacion() == 1) {
                        $douIngresoBasePrestacional += $douPagoDetalleOperado;    
                        $arPagoDetalle->setVrIngresoBasePrestacion($douPagoDetalleOperado);
                    }                                                                                                                                                                
                    $arPagoDetalle->setPrestacional(1);
                }

                $em->persist($arPagoDetalle);                            
            }  

            //Horas extra
            $arrHorasExtras = $this->horasExtra($arProgramacionPagoDetalle, $arConfiguracion);
            foreach($arrHorasExtras as $arrHorasExtra) {
                //$arPagoConcepto = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoConcepto();                
                $arPagoConcepto = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoConcepto')->find($arrHorasExtra['concepto']);                                
                $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                $arPagoDetalle->setPagoRel($arPago);
                $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
                $arPagoDetalle->setAdicional($arPagoConcepto->getConceptoAdicion());                                

                $douVrHoraAdicional = ($douVrHora * $arPagoConcepto->getPorPorcentaje())/100;
                $douPagoDetalle = $douVrHoraAdicional * $arrHorasExtra['horas'];
                $arPagoDetalle->setPorcentajeAplicado($arPagoConcepto->getPorPorcentaje());
                $arPagoDetalle->setVrHora($douVrHoraAdicional);
                $arPagoDetalle->setVrDia(0);
                $arPagoDetalle->setNumeroHoras($arrHorasExtra['horas']);
                $douPagoDetalle = round($douPagoDetalle);                
                $devengado += $douPagoDetalle;
                $devengadoPrestacional += $douPagoDetalle;
                $arPagoDetalle->setVrPago($douPagoDetalle);
                $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());
                $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConcepto->getOperacion());                                
                $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);                            
                if($arPagoConcepto->getPrestacional() == 1) {
                    if($arPagoConcepto->getGeneraIngresoBasePrestacion() == 1) {
                        $douIngresoBasePrestacional += $douPagoDetalle;    
                        $arPagoDetalle->setVrIngresoBasePrestacion($douPagoDetalle);
                    }                                        
                    if($arPagoConcepto->getGeneraIngresoBaseCotizacion() == 1) {
                        $douIngresoBaseCotizacion += $douPagoDetalle;    
                        $arPagoDetalle->setVrIngresoBaseCotizacion($douPagoDetalle);
                        $arPagoDetalle->setCotizacion(1);
                        $douVrHoraAdicional = ($douVrHora * $arPagoConcepto->getPorPorcentajeTiempoExtra())/100;
                        $douPagoDetalle = $douVrHoraAdicional * $arrHorasExtra['horas'];                        
                        $arPagoDetalle->setVrIngresoBaseCotizacionAdicional($douPagoDetalle); 
                        $arPagoDetalle->setVrExtra($douPagoDetalle);
                        if($arPagoConcepto->getComponeSalario() == 1) {
                            $douPagoDetalle = $douVrHora * $arrHorasExtra['horas'];                        
                            $arPagoDetalle->setVrIngresoBaseCotizacionSalario($douPagoDetalle);                                                    
                        }
                    }                    
                    $arPagoDetalle->setPrestacional(1);
                }
                $em->persist($arPagoDetalle);                                
            }

            //Concepto ajuste devengado
            if($arProgramacionPagoDetalle->getVrAjusteDevengado() > 0) {                
                $arPagoConcepto = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoConcepto')->find($arConfiguracion->getCodigoAjusteDevengado());                                
                $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                $arPagoDetalle->setPagoRel($arPago);
                $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
                $arPagoDetalle->setAdicional(1);                                               
                $douPagoDetalle = round($arProgramacionPagoDetalle->getVrAjusteDevengado());                
                $devengado += $douPagoDetalle;
                $devengadoPrestacional += $douPagoDetalle;
                $arPagoDetalle->setVrPago($douPagoDetalle);
                $arPagoDetalle->setOperacion(1);
                $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConcepto->getOperacion());                                
                $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);                            
                if($arPagoConcepto->getPrestacional() == 1) {
                    if($arPagoConcepto->getGeneraIngresoBasePrestacion() == 1) {
                        $douIngresoBasePrestacional += $douPagoDetalle;    
                        $arPagoDetalle->setVrIngresoBasePrestacion($douPagoDetalle);
                    }                                        
                    if($arPagoConcepto->getGeneraIngresoBaseCotizacion() == 1) {
                        $douIngresoBaseCotizacion += $douPagoDetalle;    
                        $arPagoDetalle->setVrIngresoBaseCotizacion($douPagoDetalle);
                        $arPagoDetalle->setCotizacion(1);
                        if($arPagoConcepto->getComponeSalario() == 1) {                                                    
                            $arPagoDetalle->setVrIngresoBaseCotizacionSalario($douPagoDetalle);                                                    
                        }
                    }                    
                    $arPagoDetalle->setPrestacional(1);
                }
                $em->persist($arPagoDetalle);                 
            }
            
            //Procesar creditos
            $arCreditos = new \Brasa\RecursoHumanoBundle\Entity\RhuCredito();
            $arCreditos = $em->getRepository('BrasaRecursoHumanoBundle:RhuCredito')->findBy(array('codigoEmpleadoFk' => $arProgramacionPagoDetalle->getCodigoEmpleadoFk(), 'codigoCreditoTipoPagoFk' => 1, 'estadoPagado' => 0, 'estadoSuspendido' => 0));
            foreach ($arCreditos as $arCredito) {
                if($arCredito->getSaldo() > 0) {
                    $descontarCuota = true;
                    $numeroCuotas = $arCredito->getNumeroCuotas();
                    $numeroCuotaActual = $arCredito->getNumeroCuotaActual();
                    if ($arCredito->getValidarCuotas() == 1 ){
                        if ($numeroCuotaActual > $numeroCuotas){
                            $descontarCuota = false;
                        }                        
                    }                    
                    if($arCredito->getFechaInicio() > $arProgramacionPagoDetalle->getFechaHasta()) {
                        $descontarCuota = false;
                    }
                    if($descontarCuota) {
                        $arPagoConceptoCredito = $arCredito->getCreditoTipoRel()->getPagoConceptoRel();
                        $arCreditoProcesar = new \Brasa\RecursoHumanoBundle\Entity\RhuCredito();
                        $arCreditoProcesar = $em->getRepository('BrasaRecursoHumanoBundle:RhuCredito')->find($arCredito->getCodigoCreditoPk());
                        $douCuota = 0;
                        if($arCreditoProcesar->getSaldo() >= $arCreditoProcesar->getVrCuota()){
                            $douCuota = $arCreditoProcesar->getVrCuota();
                        }
                        else {
                            $douCuota = $arCreditoProcesar->getSaldo();
                        }
                        $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                        $arPagoDetalle->setPagoRel($arPago);
                        $arPagoDetalle->setPagoConceptoRel($arPagoConceptoCredito);
                        $douPagoDetalle = $douCuota; //Falta afectar credito
                        $douPagoDetalle = round($douPagoDetalle);
                        $arPagoDetalle->setDetalle($arCredito->getCreditoTipoRel()->getNombre());
                        $arPagoDetalle->setVrPago($douPagoDetalle);
                        $arPagoDetalle->setOperacion($arPagoConceptoCredito->getOperacion());
                        $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConceptoCredito->getOperacion());
                        $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                        $arPagoDetalle->setCreditoRel($arCredito);
                        $em->persist($arPagoDetalle);                      
                    }                    
                }                                                                                                                                                                                                                                                                                                                                              
            }                     
            
            //Liquidar salario
            if($arContrato->getSalarioIntegral() == 1) {
                $intPagoConceptoSalario = $arConfiguracion->getCodigoSalarioIntegral();
            } else {
                $intPagoConceptoSalario = $arConfiguracion->getCodigoHoraDiurnaTrabajada();
            }

            if($arProgramacionPagoDetalle->getCodigoSoportePagoFk()) {
                $horasOrdinariasDiurnas = $arProgramacionPagoDetalle->getHorasDiurnas();
            } else {
                $horasOrdinariasDiurnas = $horasDiurnas;
            }
            $arPagoConcepto = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoConcepto')->find($intPagoConceptoSalario);
            $douPagoDetalle = $horasOrdinariasDiurnas * $douVrHora;
            $douPagoDetalle = round($douPagoDetalle);
            $devengado += $douPagoDetalle;
            $devengadoPrestacional += $douPagoDetalle;
            $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
            $arPagoDetalle->setPagoRel($arPago);
            $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
            $arPagoDetalle->setVrHora($douVrHora);
            $arPagoDetalle->setVrDia($douVrDia);
            $arPagoDetalle->setPorcentajeAplicado($arPagoConcepto->getPorPorcentaje());
            $arPagoDetalle->setNumeroHoras($horasOrdinariasDiurnas);
            $arPagoDetalle->setNumeroDias(0);
            $arPagoDetalle->setCotizacion(1);
            $arPagoDetalle->setPrestacional(1);
            $arPagoDetalle->setVrPago($douPagoDetalle);
            $arPagoDetalle->setVrIngresoBaseCotizacionSalario($douPagoDetalle);
            $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());
            $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConcepto->getOperacion());
            $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
            $em->persist($arPagoDetalle);
            //El ingreso base cotizacion del salacion integral es el 70% del salario                        
            if($arProgramacionPagoDetalle->getSalarioIntegral() == 1) {
                $douPagoDetalleCotizacion = ($douPagoDetalle * 70 / 100);    
            } else {
                $douPagoDetalleCotizacion = $douPagoDetalle;
            }                        
            $douIngresoBasePrestacional += $douPagoDetalle;
            $douIngresoBaseCotizacion += $douPagoDetalleCotizacion;                        
            $arPagoDetalle->setVrIngresoBasePrestacion($douPagoDetalle);
            $arPagoDetalle->setVrIngresoBaseCotizacion($douPagoDetalleCotizacion);

            //Liquidar salud
            if($arProgramacionPagoDetalle->getDescuentoSalud() == 1) {                            
                $intDias = $intHorasLaboradas / 8;
                $floPorcentaje = $arContrato->getTipoSaludRel()->getPorcentajeEmpleado();
                $intOperacion = -1;
                if($floPorcentaje > 0) {
                    $douPagoDetalle = ($douIngresoBaseCotizacion * $floPorcentaje)/100;     
                    $douPagoDetalle = round($douPagoDetalle);
                    $salud = $douPagoDetalle;
                    $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                    $arPagoDetalle->setPagoRel($arPago);
                    $arPagoDetalle->setPagoConceptoRel($arContrato->getTipoSaludRel()->getPagoConceptoRel());
                    $arPagoDetalle->setPorcentajeAplicado($floPorcentaje);
                    $arPagoDetalle->setVrDia($douVrDia);
                    $arPagoDetalle->setVrPago($douPagoDetalle);
                    $arPagoDetalle->setOperacion($intOperacion);
                    $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $intOperacion);
                    $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                    $arPagoDetalle->setSalud(1);
                    $em->persist($arPagoDetalle);                                
                }                                                        
            }                        

            //Liquidar pension
            if($arProgramacionPagoDetalle->getDescuentoPension() == 1) {                            
                $douPorcentaje = $arContrato->getTipoPensionRel()->getPorcentajeEmpleado();
                $intOperacion = -1;
                if($douPorcentaje > 0) {
                    $douPagoDetalle = ($douIngresoBaseCotizacion * $douPorcentaje)/100; 
                    $douPagoDetalle = round($douPagoDetalle);
                    $pension = $douPagoDetalle;
                    $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                    $arPagoDetalle->setPagoRel($arPago);
                    $arPagoDetalle->setPagoConceptoRel($arContrato->getTipoPensionRel()->getPagoConceptoRel());
                    $arPagoDetalle->setPorcentajeAplicado($douPorcentaje);
                    $arPagoDetalle->setVrDia($douVrDia);
                    $arPagoDetalle->setVrPago($douPagoDetalle);
                    $arPagoDetalle->setOperacion($intOperacion);
                    $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $intOperacion);
                    $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                    $arPagoDetalle->setPension(1);
                    $em->persist($arPagoDetalle);   

                    //Fondo de solidaridad pensional
                    if($intHorasLaboradas > 0) {                                
                        $douValorHoraMinimo = ($douVrSalarioMinimo / 240) * 4;
                        if($douVrHora > $douValorHoraMinimo) {
                            $douPorcentaje = 1;
                            $douPagoDetalle = ($douIngresoBaseCotizacion * $douPorcentaje)/100; 
                            $douPagoDetalle = round($douPagoDetalle);
                            $pension += $douPagoDetalle;
                            $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                            $arPagoDetalle->setPagoRel($arPago);
                            $arPagoDetalle->setPagoConceptoRel($arContrato->getTipoPensionRel()->getPagoConceptoFondoRel());
                            $arPagoDetalle->setPorcentajeAplicado($douPorcentaje);
                            $arPagoDetalle->setVrDia($douVrDia);
                            $arPagoDetalle->setVrPago($douPagoDetalle);
                            $arPagoDetalle->setOperacion($intOperacion);
                            $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $intOperacion);
                            $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                            $arPagoDetalle->setPension(1);
                            $em->persist($arPagoDetalle);                                         
                        }                                        
                    }

                }                            
            }                                                

            //Subsidio transporte
            if($arProgramacionPagoDetalle->getPagoAuxilioTransporte() == 1) {
                if($arProgramacionPagoDetalle->getDiasTransporte() > 0) {
                    if($arProgramacionPagoDetalle->getEmpleadoRel()->getAuxilioTransporte() == 1) {
                        $intPagoConceptoTransporte = $arConfiguracion->getCodigoAuxilioTransporte();
                        $arPagoConcepto = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoConcepto')->find($intPagoConceptoTransporte);
                        $duoVrAuxilioTransporte = $arConfiguracion->getVrAuxilioTransporte();
                        $douVrDiaTransporte = $duoVrAuxilioTransporte / 30;
                        $douPagoDetalle = $douVrDiaTransporte * $arProgramacionPagoDetalle->getDiasTransporte();
                        $douPagoDetalle = round($douPagoDetalle);
                        $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                        $arPagoDetalle->setPagoRel($arPago);
                        $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
                        $arPagoDetalle->setNumeroHoras(0);
                        $arPagoDetalle->setNumeroDias($arProgramacionPagoDetalle->getDiasTransporte());
                        $arPagoDetalle->setVrHora($douVrDiaTransporte / 8);
                        $arPagoDetalle->setVrDia($douVrDiaTransporte);
                        $arPagoDetalle->setVrPago($douPagoDetalle);
                        if($arPagoConcepto->getGeneraIngresoBasePrestacion() == 1) {
                            $douIngresoBasePrestacional += $douPagoDetalle;    
                            $arPagoDetalle->setVrIngresoBasePrestacion($douPagoDetalle);
                        }    
                        $arPagoDetalle->setPrestacional($arPagoConcepto->getPrestacional());
                        $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());
                        $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConcepto->getOperacion());
                        $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                        $em->persist($arPagoDetalle);
                    }
                }                            
            }
            
            //Embargos
            $arEmbargos = new \Brasa\RecursoHumanoBundle\Entity\RhuEmbargo();
            $arEmbargos = $em->getRepository('BrasaRecursoHumanoBundle:RhuEmbargo')->findBy(array('codigoEmpleadoFk' => $arProgramacionPagoDetalle->getCodigoEmpleadoFk(), 'estadoActivo' => 1));
            foreach ($arEmbargos as $arEmbargo) {
                $douPagoDetalle = 0;
                if($arEmbargo->getValorFijo()) {
                    $douPagoDetalle = $arEmbargo->getValor();
                }
                if($arEmbargo->getPorcentajeDevengado()) {                
                    $douPagoDetalle = ($devengado * $arEmbargo->getPorcentaje()) / 100;
                    $douPagoDetalle = round($douPagoDetalle);
                }
                if($arEmbargo->getPorcentajeDevengadoPrestacional()) {                
                    $douPagoDetalle = ($devengadoPrestacional * $arEmbargo->getPorcentaje()) / 100;
                    $douPagoDetalle = round($douPagoDetalle);
                }                
                if($arEmbargo->getPorcentajeDevengadoMenosDescuentoLey()) {                
                    $douPagoDetalle = (($devengado - $salud - $pension) * $arEmbargo->getPorcentaje()) / 100;
                    $douPagoDetalle = round($douPagoDetalle);
                }     
                if($arEmbargo->getPorcentajeExcedaSalarioMinimo()) {
                    $salarioMinimoDevengado = ($douVrSalarioMinimo / 30) * $arProgramacionPagoDetalle->getDiasTransporte();
                    $baseDescuento = $devengado - $salarioMinimoDevengado;
                    if($baseDescuento > 0) {             
                        $douPagoDetalle = ($baseDescuento * $arEmbargo->getPorcentaje()) / 100;
                        $douPagoDetalle = round($douPagoDetalle);                                                
                    }                    
                }
                if($arEmbargo->getPartesExcedaSalarioMinimo()) {
                    $salarioMinimoDevengado = ($douVrSalarioMinimo / 30) * $arProgramacionPagoDetalle->getDiasTransporte();
                    $baseDescuento = $devengado - $salarioMinimoDevengado;
                    if($baseDescuento > 0) {                        
                        $douPagoDetalle = $baseDescuento / $arEmbargo->getPartes();
                    }
                }
                if($douPagoDetalle > 0) {
                    $arPagoConcepto = $arEmbargo->getEmbargoTipoRel()->getPagoConceptoRel();
                    $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                    $arPagoDetalle->setPagoRel($arPago);
                    $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
                    $douPagoDetalle = round($douPagoDetalle);                    
                    $arPagoDetalle->setVrPago($douPagoDetalle);
                    $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());
                    $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConcepto->getOperacion());
                    $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                    $em->persist($arPagoDetalle);                    
                }                                                                                                                                                                                                                                                                                                                                                                                                                                                    
            }                        

            $intDiasLaborados = $intHorasLaboradas / $intFactorDia;                        
            $douAuxilioTransporteCotizacion = $arProgramacionPagoDetalle->getDiasTransporte() * ($arConfiguracion->getVrAuxilioTransporte() / 30);
            $arPago->setVrAuxilioTransporteCotizacion($douAuxilioTransporteCotizacion);
            $arPago->setDiasLaborados($intDiasLaborados);
            $em->persist($arPago);
            $codigoPago = 0;
            if($guardar == 1) {
                $em->flush();
                $codigoPago = $arPago->getCodigoPagoPk();
            }
        }                    
        
        //Prima
        if($arProgramacionPagoProcesar->getCodigoPagoTipoFk() == 2) {
            $arContrato = $arProgramacionPagoDetalle->getContratoRel();
            $arPago = new \Brasa\RecursoHumanoBundle\Entity\RhuPago();                                                          
            $arPago->setPagoTipoRel($arProgramacionPagoProcesar->getPagoTipoRel());                        
            $arPago->setEmpleadoRel($arProgramacionPagoDetalle->getEmpleadoRel());
            $arPago->setCentroCostoRel($arCentroCosto);
            $arPago->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
            $arPago->setFechaDesde($arProgramacionPagoProcesar->getFechaDesde());
            $arPago->setFechaHasta($arProgramacionPagoProcesar->getFechaHasta());
            $arPago->setFechaDesdePago($arProgramacionPagoDetalle->getFechaDesdePago());
            $arPago->setFechaHastaPago($arProgramacionPagoDetalle->getFechaHastaPago());
            $arPago->setVrSalarioEmpleado($arProgramacionPagoDetalle->getVrSalario());
            $arPago->setVrSalarioPeriodo($arProgramacionPagoDetalle->getVrDevengado());
            $arPago->setProgramacionPagoRel($arProgramacionPagoProcesar);
            $arPago->setContratoRel($arContrato);                        
            $arPago->setDiasPeriodo($arProgramacionPagoDetalle->getDias());
            $arPago->setCodigoUsuario($arProgramacionPagoProcesar->getCodigoUsuario());
            $arPago->setComentarios($arProgramacionPagoDetalle->getComentarios());
            $arPago->setCodigoSoportePagoFk($arProgramacionPagoDetalle->getCodigoSoportePagoFk());                                   
            $em->persist($arPago);
            
            //Prima
            $dias = $arProgramacionPagoDetalle->getDias();
            if($arConfiguracion->getDiasAusentismoPrimas()) {                    
                $dias = $arProgramacionPagoDetalle->getDias() - $arProgramacionPagoDetalle->getDiasAusentismo();
            }
            $salarioPrima = $arProgramacionPagoDetalle->getVrSalarioPrima();
            if($arProgramacionPagoDetalle->getVrSalarioPrimaPropuesto() > 0) {
                $salarioPrima = $arProgramacionPagoDetalle->getVrSalarioPrimaPropuesto();
            }
            $douPrima = ($salarioPrima * $dias) / 360;            
            $douPrima = round($douPrima);
            $devengado = $douPrima;
            $arPagoConcepto = $em->getRepository('BrasaRecursoHumanoBundle:RhuPagoConcepto')->find($arConfiguracion->getCodigoPrima());
            $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
            $arPagoDetalle->setPagoRel($arPago);
            $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
            $arPagoDetalle->setDetalle('');
            $arPagoDetalle->setVrPago($douPrima);
            $arPagoDetalle->setNumeroDias($dias);
            $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());
            $arPagoDetalle->setVrPagoOperado($douPrima * $arPagoConcepto->getOperacion());
            $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
            $em->persist($arPagoDetalle); 
            
            //Procesar creditos
            $arCreditos = new \Brasa\RecursoHumanoBundle\Entity\RhuCredito();
            $arCreditos = $em->getRepository('BrasaRecursoHumanoBundle:RhuCredito')->findBy(array('codigoEmpleadoFk' => $arProgramacionPagoDetalle->getCodigoEmpleadoFk(), 'codigoCreditoTipoPagoFk' => 1, 'estadoPagado' => 0, 'estadoSuspendido' => 0, 'aplicarCuotaPrima' => 1));
            foreach ($arCreditos as $arCredito) {
                if($arCredito->getSaldo() > 0) {
                    $descontarCuota = true;
                    $numeroCuotas = $arCredito->getNumeroCuotas();
                    $numeroCuotaActual = $arCredito->getNumeroCuotaActual();
                    if ($arCredito->getValidarCuotas() == 1 ){
                        if ($numeroCuotaActual > $numeroCuotas){
                            $descontarCuota = false;
                        }                        
                    }                    
                    if($descontarCuota) {
                        $arPagoConceptoCredito = $arCredito->getCreditoTipoRel()->getPagoConceptoRel();
                        $arCreditoProcesar = new \Brasa\RecursoHumanoBundle\Entity\RhuCredito();
                        $arCreditoProcesar = $em->getRepository('BrasaRecursoHumanoBundle:RhuCredito')->find($arCredito->getCodigoCreditoPk());
                        $douCuota = 0;
                        if($arCreditoProcesar->getSaldo() >= $arCreditoProcesar->getVrCuotaPrima()){
                            $douCuota = $arCreditoProcesar->getVrCuotaPrima();
                        }
                        else {
                            $douCuota = $arCreditoProcesar->getSaldo();
                        }
                        $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                        $arPagoDetalle->setPagoRel($arPago);
                        $arPagoDetalle->setPagoConceptoRel($arPagoConceptoCredito);
                        $douPagoDetalle = $douCuota; //Falta afectar credito
                        $douPagoDetalle = round($douPagoDetalle);
                        $arPagoDetalle->setDetalle($arCredito->getCreditoTipoRel()->getNombre());
                        $arPagoDetalle->setVrPago($douPagoDetalle);
                        $arPagoDetalle->setOperacion($arPagoConceptoCredito->getOperacion());
                        $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConceptoCredito->getOperacion());
                        $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                        $arPagoDetalle->setCreditoRel($arCredito);
                        $em->persist($arPagoDetalle);                      
                    }                    
                }                                                                                                                                                                                                                                                                                                                                              
            } 
            
            //Embargos
            $arEmbargos = new \Brasa\RecursoHumanoBundle\Entity\RhuEmbargo();
            $arEmbargos = $em->getRepository('BrasaRecursoHumanoBundle:RhuEmbargo')->findBy(array('codigoEmpleadoFk' => $arProgramacionPagoDetalle->getCodigoEmpleadoFk(), 'estadoActivo' => 1));
            foreach ($arEmbargos as $arEmbargo) {
                $douPagoDetalle = 0;
                if($arEmbargo->getValorFijo()) {
                    $douPagoDetalle = $arEmbargo->getValor();
                }
                if($arEmbargo->getPorcentajeDevengado()) {                
                    $douPagoDetalle = ($devengado * $arEmbargo->getPorcentaje()) / 100;
                    $douPagoDetalle = round($douPagoDetalle);
                }
                if($arEmbargo->getPorcentajeDevengadoPrestacional()) {                
                    $douPagoDetalle = ($devengado * $arEmbargo->getPorcentaje()) / 100;
                    $douPagoDetalle = round($douPagoDetalle);
                }                
                if($arEmbargo->getPorcentajeDevengadoMenosDescuentoLey()) {                
                    $douPagoDetalle = ($devengado * $arEmbargo->getPorcentaje()) / 100;
                    $douPagoDetalle = round($douPagoDetalle);
                }     
                /*if($arEmbargo->getPorcentajeExcedaSalarioMinimo()) {
                    $salarioMinimoDevengado = ($douVrSalarioMinimo / 30) * $arProgramacionPagoDetalle->getDiasTransporte();
                    $baseDescuento = $devengado - $salarioMinimoDevengado;
                    if($baseDescuento > 0) {             
                        $douPagoDetalle = ($baseDescuento * $arEmbargo->getPorcentaje()) / 100;
                        $douPagoDetalle = round($douPagoDetalle);                                                
                    }                    
                }*/
                /*if($arEmbargo->getPartesExcedaSalarioMinimo()) {
                    $salarioMinimoDevengado = ($douVrSalarioMinimo / 30) * $arProgramacionPagoDetalle->getDiasTransporte();
                    $baseDescuento = $devengado - $salarioMinimoDevengado;
                    if($baseDescuento > 0) {                        
                        $douPagoDetalle = $baseDescuento / $arEmbargo->getPartes();
                    }
                }*/
                if($douPagoDetalle > 0) {
                    $arPagoConcepto = $arEmbargo->getEmbargoTipoRel()->getPagoConceptoRel();
                    $arPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuPagoDetalle();
                    $arPagoDetalle->setPagoRel($arPago);
                    $arPagoDetalle->setPagoConceptoRel($arPagoConcepto);
                    $douPagoDetalle = round($douPagoDetalle);                    
                    $arPagoDetalle->setVrPago($douPagoDetalle);
                    $arPagoDetalle->setOperacion($arPagoConcepto->getOperacion());
                    $arPagoDetalle->setVrPagoOperado($douPagoDetalle * $arPagoConcepto->getOperacion());
                    $arPagoDetalle->setProgramacionPagoDetalleRel($arProgramacionPagoDetalle);
                    $em->persist($arPagoDetalle);                    
                }                                                                                                                                                                                                                                                                                                                                                                                                                                                    
            }             
            
            if($guardar == 1) {
                $em->flush();
                $codigoPago = $arPago->getCodigoPagoPk();
            }           
        }        
        return $codigoPago;
    }
    
    public function generarProgramacionPagoDetallePorSede($codigoProgramacionPago) {
        $em = $this->getEntityManager();
        $arProgramacionPagoDetalles = new \Brasa\RecursoHumanoBundle\Entity\RhuProgramacionPagoDetalle();
        $arProgramacionPagoDetalles = $em->getRepository('BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalle')->findBy(array('codigoProgramacionPagoFk' => $codigoProgramacionPago));
        foreach ($arProgramacionPagoDetalles as $arProgramacionPagoDetalle) {
            $intHoras = 0;
            $arProgramacionPagoDetalleProcesar = new \Brasa\RecursoHumanoBundle\Entity\RhuProgramacionPagoDetalle();
            $arProgramacionPagoDetalleProcesar = $em->getRepository('BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalle')->find($arProgramacionPagoDetalle->getCodigoProgramacionPagoDetallePk());            
            $arProgramacionPagoDetallesSedes = new \Brasa\RecursoHumanoBundle\Entity\RhuProgramacionPagoDetalleSede();
            $arProgramacionPagoDetallesSedes = $em->getRepository('BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalleSede')->findBy(array('codigoProgramacionPagoDetalleFk' => $arProgramacionPagoDetalle->getCodigoProgramacionPagoDetallePk(), 'codigoEmpleadoFk' => $arProgramacionPagoDetalle->getCodigoEmpleadoFk()));                        
            foreach ($arProgramacionPagoDetallesSedes as $arProgramacionPagoDetalleSede) {
                $intHoras = $intHoras + $arProgramacionPagoDetalleSede->getHorasPeriodo();
            }
            foreach ($arProgramacionPagoDetallesSedes as $arProgramacionPagoDetalleSede) {
                $arProgramacionPagoDetalleSedeProcesar = new \Brasa\RecursoHumanoBundle\Entity\RhuProgramacionPagoDetalleSede();
                $arProgramacionPagoDetalleSedeProcesar = $em->getRepository('BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalleSede')->find($arProgramacionPagoDetalleSede->getCodigoProgramacionPagoDetalleSedePk());                                                        
                $arProgramacionPagoDetalleSedeProcesar->setPorcentajeParticipacion(($arProgramacionPagoDetalleSedeProcesar->getHorasPeriodo() / $intHoras) * 100);
                $em->persist($arProgramacionPagoDetalleSedeProcesar);
            }            
            $arProgramacionPagoDetalleProcesar->setHorasPeriodoReales($intHoras);
            $em->persist($arProgramacionPagoDetalleProcesar);
        }
        $em->flush();
    } 
    
    public function listaDQLDetalleArchivo($codigoProgramacionPago = "") {        
        $em = $this->getEntityManager();
        $strSql = "SELECT ppd,e FROM BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalle ppd JOIN ppd.empleadoRel e WHERE
                  ppd.codigoProgramacionPagoFk = ".$codigoProgramacionPago."";
    
        //$strSql .= " ORDER BY e.nombreCorto";
        $query = $em->createQuery($strSql);
        $arRegistros = $query->getResult();
        return $arRegistros;        
    }
    
    public function fechaPrimerPago($codigoContrato) {
        $em = $this->getEntityManager();
        $dql   = "SELECT MIN(pp.fechaDesde) FROM BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalle ppd JOIN ppd.programacionPagoRel pp "
                . "WHERE ppd.codigoContratoFk = " . $codigoContrato
                . " AND pp.estadoPagado = 1";                
        $query = $em->createQuery($dql);
        $arrayResultado = $query->getSingleScalarResult();
        return $arrayResultado;
    }
    
    public function eliminarTodoEmpleados($codigoProgramacionPago) {
        $em = $this->getEntityManager();
        $arProgramacionPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuProgramacionPagoDetalle();
        $arProgramacionPagoDetalle = $em->getRepository('BrasaRecursoHumanoBundle:RhuProgramacionPagoDetalle')->findBy(array('codigoProgramacionPagoFk' => $codigoProgramacionPago));
        if ($arProgramacionPagoDetalle <> null){
            $strSql = "DELETE FROM rhu_programacion_pago_detalle WHERE codigo_programacion_pago_fk = " . $codigoProgramacionPago;
            $em->getConnection()->executeQuery($strSql);
            //$em->persist($arProgramacionPagoDetalle);
            //$em->flush();
            return true;
        }    
    }
    
    private function horasExtra($arProgramacionPagoDetalle, $arConfiguracion) {
        //$arConfiguracion = new \Brasa\RecursoHumanoBundle\Entity\RhuConfiguracion();
        //$arProgramacionPagoDetalle = new \Brasa\RecursoHumanoBundle\Entity\RhuProgramacionPagoDetalle();        
        $arrExtra = array();
        if($arProgramacionPagoDetalle->getHorasDescanso() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraDescanso(), 'horas' => $arProgramacionPagoDetalle->getHorasDescanso());
        }        
        if($arProgramacionPagoDetalle->getHorasNocturnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraNocturna(), 'horas' => $arProgramacionPagoDetalle->getHorasNocturnas());
        }
        if($arProgramacionPagoDetalle->getHorasFestivasDiurnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraFestivaDiurna(), 'horas' => $arProgramacionPagoDetalle->getHorasFestivasDiurnas());
        }
        if($arProgramacionPagoDetalle->getHorasFestivasNocturnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraFestivaNocturna(), 'horas' => $arProgramacionPagoDetalle->getHorasFestivasNocturnas());
        }        
        if($arProgramacionPagoDetalle->getHorasExtrasOrdinariasDiurnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraExtraOrdinariaDiurna(), 'horas' => $arProgramacionPagoDetalle->getHorasExtrasOrdinariasDiurnas());            
        }
        if($arProgramacionPagoDetalle->getHorasExtrasOrdinariasNocturnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraExtraOrdinariaNocturna(), 'horas' => $arProgramacionPagoDetalle->getHorasExtrasOrdinariasNocturnas());
        }        
        if($arProgramacionPagoDetalle->getHorasExtrasFestivasDiurnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraExtraFestivaDiurna(), 'horas' => $arProgramacionPagoDetalle->getHorasExtrasFestivasDiurnas());
        }
        if($arProgramacionPagoDetalle->getHorasExtrasFestivasNocturnas() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraExtraFestivaNocturna(), 'horas' => $arProgramacionPagoDetalle->getHorasExtrasFestivasNocturnas());
        } 
        if($arProgramacionPagoDetalle->getHorasRecargoNocturno() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraRecargoNocturno(), 'horas' => $arProgramacionPagoDetalle->getHorasRecargoNocturno());
        }  
        if($arProgramacionPagoDetalle->getHorasRecargoFestivoDiurno() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraRecargoFestivoDiurno(), 'horas' => $arProgramacionPagoDetalle->getHorasRecargoFestivoDiurno());
        }        
        if($arProgramacionPagoDetalle->getHorasRecargoFestivoNocturno() > 0) {
            $arrExtra[] = array('concepto' => $arConfiguracion->getCodigoHoraRecargoFestivoNocturno(), 'horas' => $arProgramacionPagoDetalle->getHorasRecargoFestivoNocturno());
        }     
        
        return $arrExtra;
    }    
    
}