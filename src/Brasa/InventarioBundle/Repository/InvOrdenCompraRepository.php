<?php

namespace Brasa\InventarioBundle\Repository;

/**
 * InvOrdenCompraRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvOrdenCompraRepository extends \Doctrine\ORM\EntityRepository {

    public function listaDql($strCodigo = '', $srtNumero = '', $srtTercero = '') {
        $dql = "SELECT oc FROM BrasaInventarioBundle:InvOrdenCompra oc WHERE oc.codigoOrdenCompraPk is not null";
        if ($strCodigo != "") {
            $dql .= " AND oc.codigoOrdenCompraPk = '" . $strCodigo . "'";
        }
        if ($srtNumero != "") {
            $dql .= " AND oc.numero = '" . $srtNumero . "'";
        }
        if ($srtTercero != "") {
            $dql .= " AND oc.codigoTerceroFk = '" . $srtTercero . "'";
        }
        return $dql;
    }

    public function liquidar($codigoOrdenCompra) {
        $em = $this->getEntityManager();
        $arOrdenCompra = new \Brasa\InventarioBundle\Entity\InvOrdenCompra();
        $arOrdenCompra = $em->getRepository('BrasaInventarioBundle:InvOrdenCompra')->find($codigoOrdenCompra);
        $subtotal = 0;
        $iva = 0;
        $total = 0;
        $arOrdenCompraDetalle = new \Brasa\InventarioBundle\Entity\InvOrdenCompraDetalle();
        $arOrdenCompraDetalle = $em->getRepository('BrasaInventarioBundle:InvOrdenCompraDetalle')->findBy(array('codigoOrdenCompraFk' => $codigoOrdenCompra));
        foreach ($arOrdenCompraDetalle as $arOrdenCompraDetalle) {
            $ordenCompraDetalleAct = new \Brasa\InventarioBundle\Entity\InvOrdenCompraDetalle();
            $ordenCompraDetalleAct = $em->getRepository('BrasaInventarioBundle:InvOrdenCompraDetalle')->find($arOrdenCompraDetalle->getCodigoDetalleOrdenCompraPk());
            $subtotalDetalle = $arOrdenCompraDetalle->getValor() * $arOrdenCompraDetalle->getCantidad();
            $ivaDetalle = ($subtotalDetalle * $ordenCompraDetalleAct->getPorcentajeIva()) / 100;
            $totalDetalle = $subtotalDetalle + $ivaDetalle;
            $ordenCompraDetalleAct->setVrIva($ivaDetalle);
            $ordenCompraDetalleAct->setVrSubtotal($subtotalDetalle);
            $ordenCompraDetalleAct->setVrTotal($totalDetalle);
            $em->persist($ordenCompraDetalleAct);

            $subtotal += $subtotalDetalle;
            $iva += $ivaDetalle;
            $total += $totalDetalle;
        }

        $subtotal = round($subtotal);
        $iva = round($iva);
        $totalNeto = $subtotal + $iva;
        $arOrdenCompra->setVrSubtotal($subtotal);
        $arOrdenCompra->setVrIva($iva);
        $arOrdenCompra->setVrNeto($totalNeto);
        $em->persist($arOrdenCompra);
        $em->flush();
        return true;
    }

    public function autorizar($codigoOrdenCompra) {
        $em = $this->getEntityManager();
        $arOrdenCompra = new \Brasa\InventarioBundle\Entity\InvOrdenCompra();
        $arOrdenCompra = $em->getRepository('BrasaInventarioBundle:InvOrdenCompra')->find($codigoOrdenCompra);
        $arOrdenCompraDetalle = new \Brasa\InventarioBundle\Entity\InvOrdenCompraDetalle();
        $arOrdenCompraDetalle = $em->getRepository('BrasaInventarioBundle:InvOrdenCompraDetalle')->findBy(array('codigoOrdenCompraFk' => $codigoOrdenCompra));
        $strResultado = "";
        if ($arOrdenCompraDetalle) {
            if ($arOrdenCompra->getEstadoAutorizado() == 0) {
                $arOrdenCompra->setEstadoAutorizado(1);
                $em->persist($arOrdenCompra);
                $em->flush();
            } else {
                $strResultado = "Ya esta autorizado";
            }
        }else{
            $strResultado = "La orden de compra no tiene detalles";
        }
        return $strResultado;
    }

    public function desAutorizar($codigoOrdenCompra) {
        $em = $this->getEntityManager();
        $arOrdenCompra = new \Brasa\InventarioBundle\Entity\InvOrdenCompra();
        $arOrdenCompra = $em->getRepository('BrasaInventarioBundle:InvOrdenCompra')->find($codigoOrdenCompra);
        $strResultado = "";
        if ($arOrdenCompra->getEstadoAutorizado() == 1 && $arOrdenCompra->getEstadoImpreso() == 0) {
            $arOrdenCompra->setEstadoAutorizado(0);
            $em->persist($arOrdenCompra);
            $em->flush();
        } else {
            $strResultado = "No se puede des-autorizar la orden de compra si esta impresa";
        }
        return $strResultado;
    }

    public function imprimir($codigoOrdenCompra) {
        $em = $this->getEntityManager();
        $respuesta = "";
        if ($respuesta == "") {
            $arOrdenCompra = new \Brasa\InventarioBundle\Entity\InvOrdenCompra();
            $arOrdenCompra = $em->getRepository('BrasaInventarioBundle:InvOrdenCompra')->find($codigoOrdenCompra);
            $arOrdenCompraDocumento = new \Brasa\InventarioBundle\Entity\InvOrdenCompraDocumento();
            $arOrdenCompraDocumento = $em->getRepository('BrasaInventarioBundle:InvOrdenCompraDocumento')->find($arOrdenCompra->getCodigoOrdenCompraDocumentoFk());
            if ($arOrdenCompra->getNumero() <= 0) {
                $consecutivo = $arOrdenCompraDocumento->getConsecutivo();
                $arOrdenCompraDocumento->setConsecutivo($consecutivo + 1);
                $em->persist($arOrdenCompraDocumento);
                $arOrdenCompra->setNumero($consecutivo);
            }
            $arOrdenCompra->setEstadoImpreso(1);
            $em->persist($arOrdenCompra);
            $em->flush();
        }
        return $respuesta;
    }

}
