<?php

namespace Brasa\CarteraBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CuentasCobrarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CarNotaDebitoRepository extends EntityRepository {
    
   public function listaDql($numero, $codigoCliente = "", $boolEstadoImpreso = "") {
        $dql   = "SELECT nd FROM BrasaCarteraBundle:CarNotaDebito nd WHERE nd.codigoNotaDebitoPk <> 0";
        if($numero != "") {
            $dql .= " AND nd.numero = " . $numero;  
        }        
        if($codigoCliente != "") {
            $dql .= " AND nd.codigoClienteFk = " . $codigoCliente;  
        }    
        if($boolEstadoImpreso == 1 ) {
            $dql .= " AND nd.estadoImpreso = 1";
        }
        if($boolEstadoImpreso == "0") {
            $dql .= " AND nd.estadoImpreso = 0";
        }        
        $dql .= " ORDER BY nd.fecha DESC";
        return $dql;
    }
    
   public function listaConsultaDql($numero = "", $codigoCliente = "", $codigoNotaDebitoConcepto = "", $strFechaDesde = "", $strFechaHasta = "") {
        $dql   = "SELECT nd FROM BrasaCarteraBundle:CarNotaDebito nd WHERE nd.codigoNotaDebitoPk <> 0 ";
        if($numero != "") {
            $dql .= " AND nd.numero = " . $numero;  
        }
        if($codigoCliente != "") {
            $dql .= " AND nd.codigoClienteFk = " . $codigoCliente;  
        }
        if($codigoNotaDebitoConcepto != "") {
            $dql .= " AND nd.codigoNotaDebitoConceptoFk = " . $codigoNotaDebitoConcepto;  
        }
        if ($strFechaDesde != ""){
            $dql .= " AND nd.fecha >='" . $strFechaDesde . "'";
        }
        if($strFechaHasta != "") {
            $dql .= " AND nd.fecha <='" . $strFechaHasta . "'";
        }        
        return $dql;
    }  
    
   public function imprimir($codigo) {
        $em = $this->getEntityManager();  
        $objFunciones = new \Brasa\GeneralBundle\MisClases\Funciones();
        $strResultado = "";
        $arNotaDebito = new \Brasa\CarteraBundle\Entity\CarNotaDebito();                        
        $arNotaDebito = $em->getRepository('BrasaCarteraBundle:CarNotaDebito')->find($codigo);        
        if($arNotaDebito->getEstadoAutorizado() == 1) {
           if($arNotaDebito->getNumero() == 0) {            
                $intNumero = $em->getRepository('BrasaCarteraBundle:CarConsecutivo')->consecutivo(2);
                $arNotaDebito->setNumero($intNumero);
                $arNotaDebito->setEstadoImpreso(1);
                $em->persist($arNotaDebito);
                $arCuentaCobrarTipo = new \Brasa\CarteraBundle\Entity\CarCuentaCobrarTipo();
                $arCuentaCobrarTipo = $em->getRepository('BrasaCarteraBundle:CarCuentaCobrarTipo')->find(7);                
                $arCuentaCobrar = new \Brasa\CarteraBundle\Entity\CarCuentaCobrar();
                $arCuentaCobrar->setClienteRel($arNotaDebito->getClienteRel());
                $arCuentaCobrar->setAsesorRel($arNotaDebito->getClienteRel()->getAsesorRel());
                $arCuentaCobrar->setCuentaCobrarTipoRel($arCuentaCobrarTipo);
                $arCuentaCobrar->setFecha($arNotaDebito->getFecha());
                $arCuentaCobrar->setFechaVence($arNotaDebito->getFecha());
                $arCuentaCobrar->setCodigoFactura(0);
                $arCuentaCobrar->setSoporte(0);
                $arCuentaCobrar->setNumeroDocumento($intNumero);
                $arCuentaCobrar->setValorOriginal($arNotaDebito->getValor());
                $saldoOperado = $arNotaDebito->getValor() * $arCuentaCobrarTipo->getOperacion();
                $arCuentaCobrar->setSaldo($arNotaDebito->getValor());
                $arCuentaCobrar->setSaldoOperado($saldoOperado);                        
                $arCuentaCobrar->setSubtotal(0);                                                
                $arCuentaCobrar->setRetencionFuente(0);
                $arCuentaCobrar->setRetencionIva(0);
                $arCuentaCobrar->setRetencionIca(0);
                $arCuentaCobrar->setTotalNeto($arNotaDebito->getValor());
                $arCuentaCobrar->setPlazo(0);
                $arCuentaCobrar->setAbono(0);
                $arCuentaCobrar->setOperacion($arCuentaCobrarTipo->getOperacion());
                $arCuentaCobrar->setServicioTipo('');
                $em->persist($arCuentaCobrar);                                 
                $em->flush();
            } 
        } else {
            $strResultado = "Debe autorizar la cotizacion para imprimirla";
        }
        return $strResultado;
    }    
    
   public function eliminar($arrSeleccionados) {
        $em = $this->getEntityManager();
        if(count($arrSeleccionados) > 0) {
            foreach ($arrSeleccionados AS $codigo) {                
                if($em->getRepository('BrasaCarteraBundle:CarNotaDebitoDetalle')->numeroRegistros($codigo) <= 0) {
                    $arNotaDebito = $em->getRepository('BrasaCarteraBundle:CarNotaDebito')->find($codigo);                    
                    if($arNotaDebito->getEstadoAutorizado() == 0) {
                        $em->remove($arNotaDebito);                    
                    }                     
                }               
            }
            $em->flush();
        }
    }       
}