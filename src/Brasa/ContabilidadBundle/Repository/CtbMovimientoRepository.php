<?php

namespace Brasa\ContabilidadBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * MovimientosContablesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CtbMovimientoRepository extends EntityRepository
{
    
    /**
     * Liquida movimiento y totaliza
     * @param integer $codigoMovimiento
     * */
    public function Liquidar($codigoMovimiento) {
        $em = $this->getEntityManager();
        
        $arMovimiento = new \Brasa\ContabilidadBundle\Entity\CtbMovimiento();
        $arMovimiento = $em->getRepository('BrasaContabilidadBundle:CtbMovimiento')->find($codigoMovimiento);
        $arMovimientosDetalles = new \Brasa\ContabilidadBundle\Entity\CtbMovimientoDetalle;
        $arMovimientosDetalles = $em->getRepository('BrasaContabilidadBundle:CtbMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
        $douTotalDebito = 0;
        $douTotalCredito = 0;
        $douTotalIva = 0;
        $douTotalRetencion = 0;
        $douTotalRetencionCree = 0;
        $douTotalBruto = 0;
        foreach($arMovimientosDetalles as $arMovimientoDetalle) {
            if($arMovimientoDetalle->getRegistroTipoRel()->getCodigoRegistroTipoPk() == 1) {
                $douTotalDebito = $douTotalDebito + $arMovimientoDetalle->getValor();
            }                
            else {
                $douTotalCredito = $douTotalCredito + $arMovimientoDetalle->getValor();
            }
            
            if($arMovimientoDetalle->getCodigoImpuestoIvaFk() != 99 && $arMovimientoDetalle->getCodigoImpuestoIvaFk() != "") { 
                $douTotalIva = ($arMovimientoDetalle->getImpuestoIvaRel()->getPorcentaje() * $arMovimientoDetalle->getBase())/100;
            }
            if($arMovimientoDetalle->getCodigoImpuestoRetencionFk() != 99 && $arMovimientoDetalle->getCodigoImpuestoRetencionFk() != "") {
                $douTotalRetencion = ($arMovimientoDetalle->getImpuestoRetencionRel()->getPorcentaje() * $arMovimientoDetalle->getBase())/100;            
            }
            if($arMovimientoDetalle->getCodigoImpuestoCreeFk() != 99 && $arMovimientoDetalle->getCodigoImpuestoCreeFk() != "") {
                $douTotalRetencionCree = ($arMovimientoDetalle->getImpuestoCreeRel()->getPorcentaje() * $arMovimientoDetalle->getBase())/100;                                                
            }
            
            $douTotalBruto = $douTotalBruto + $arMovimientoDetalle->getValor();            
        }        
        $arMovimiento->setTotalDebito($douTotalDebito);
        $arMovimiento->setTotalCredito($douTotalCredito);
        $arMovimiento->setTotalIva($douTotalIva);
        $arMovimiento->setTotalRetencion($douTotalRetencion);
        $arMovimiento->setTotalRetencionCree($douTotalRetencionCree);
        $arMovimiento->setTotalBruto($douTotalBruto);
        $arMovimiento->setTotalNeto($douTotalBruto + $douTotalIva -($douTotalRetencion + $douTotalRetencionCree));
        $em->persist($arMovimiento);
        $em->flush();

    }     
    
    public function Autorizar($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\ContabilidadBundle\Entity\CtbMovimiento();
        $arMovimiento = $em->getRepository('BrasaContabilidadBundle:CtbMovimiento')->find($codigoMovimiento);
        if($arMovimiento->getEstadoAutorizado() == 0) {                        
            $arMovimiento->setEstadoAutorizado(1);
            $em->persist($arMovimiento);
            $em->flush();
            return "";
        }
        else
            return "El movimiento esta autorizado";
    }
    
    public function DesAutorizar($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\ContabilidadBundle\Entity\CtbMovimiento();
        $arMovimiento = $em->getRepository('BrasaContabilidadBundle:CtbMovimiento')->find($codigoMovimiento);
        if($arMovimiento->getEstadoAutorizado() == 1) {            
            $arMovimiento->setEstadoAutorizado(0);
            $em->persist($arMovimiento);
            $em->flush();
            return "";
        }
        else
            return "El movimiento no esta autorizado";
    }    
    
    public function Imprimir($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\ContabilidadBundle\Entity\CtbMovimiento();
        $arMovimiento = $em->getRepository('BrasaContabilidadBundle:CtbMovimiento')->find($codigoMovimiento);
        if ($arMovimiento->getEstadoAutorizado() == 1) { 
            if($arMovimiento->getEstadoImpreso() == 0) {
                //Genera la cuenta por pagar
                if($arMovimiento->getMovimientoConceptoRel()->getAplicaCuentasPagar() == 1) {
                    $arCuentasPagar = new \Brasa\TesoreriaBundle\Entity\TesCuentaPagar();
                    $arCuentasPagar->setFecha($arMovimiento->getFecha());
                    $arCuentasPagar->setSoporte($arMovimiento->getSoporte());
                    $arCuentasPagar->setTerceroRel($arMovimiento->getTerceroRel());
                    $arCuentasPagar->setValorOriginal($arMovimiento->getTotalNeto());
                    $arCuentasPagar->setCreditos($arMovimiento->getTotalNeto());
                    $arCuentasPagar->setSaldo($arMovimiento->getTotalNeto());
                    $em->persist($arCuentasPagar);
                    $em->flush();                    
                }
                
                //Afecta la cuenta por pagar o cuenta por cobrar
                if($arMovimiento->getMovimientoConceptoRel()->getAfectaCuentasPagar() == 1 || $arMovimiento->getMovimientoConceptoRel()->getAfectaCuentasCobrar() == 1) {
                    $arMovimientosDetalles = new \Brasa\ContabilidadBundle\Entity\CtbMovimientoDetalle();
                    $arMovimientosDetalles = $em->getRepository('BrasaContabilidadBundle:CtbMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                    foreach ($arMovimientosDetalles as $arMovimientosDetalles) {
                        //Cuenta por pagar
                        if($arMovimiento->getMovimientoConceptoRel()->getAfectaCuentasPagar() == 1) {
                            if($arMovimientosDetalles->getCodigoCuentaPagarFk() != "") {
                                $arCuentaPagar = new \Brasa\TesoreriaBundle\Entity\TesCuentaPagar();
                                $arCuentaPagar = $em->getRepository('BrasaTesoreriaBundle:TesCuentaPagar')->find($arMovimientosDetalles->getCodigoCuentaPagarFk());
                                if(count($arCuentaPagar) > 0) {
                                    $arCuentaPagar->setDebitos($arCuentaPagar->getDebitos() + $arMovimientosDetalles->getValor());
                                    $arCuentaPagar->setSaldo($arCuentaPagar->getSaldo() - $arMovimientosDetalles->getValor());
                                    $em->persist($arCuentaPagar);
                                    $em->flush();
                                }
                            }                            
                        }
                        //Cuenta por cobrar
                        if($arMovimiento->getMovimientoConceptoRel()->getAfectaCuentasCobrar() == 1) {
                            if($arMovimientosDetalles->getCodigoCuentaCobrarFk() != "") {
                                $arCuentaCobrar = new \Brasa\CarteraBundle\Entity\CarCuentaCobrar();
                                $arCuentaCobrar = $em->getRepository('BrasaCarteraBundle:CarCuentaCobrar')->find($arMovimientosDetalles->getCodigoCuentaCobrarFk());
                                if(count($arCuentaCobrar) > 0) {                                    
                                    $arCuentaCobrar->setSaldo($arCuentaCobrar->getSaldo() - $arMovimientosDetalles->getValor());
                                    $em->persist($arCuentaCobrar);
                                    $em->flush();
                                }
                            }                            
                        }
                    }                    
                }     

                //Genera la cuenta por cobrar
                if($arMovimiento->getMovimientoConceptoRel()->getAplicaCuentasCobrar() == 1) {
                    $arCuentaCobrar = new \Brasa\CarteraBundle\Entity\CarCuentaCobrar();                                        
                    $arCuentaCobrar->setFecha($arMovimiento->getFecha());
                    $arCuentaCobrar->setSoporte($arMovimiento->getSoporte());
                    $arCuentaCobrar->setTerceroRel($arMovimiento->getTerceroRel());
                    $arCuentaCobrar->setValorOriginal($arMovimiento->getTotalDebito());
                    $arCuentaCobrar->setCreditos($arMovimiento->getTotalDebito()); 
                    $intCondicion = $arMovimiento->getTerceroRel()->getPlazoPagoCliente();
                    $dateFechaVence = date("Y/m/d", strtotime(date("m/d/Y")." +$intCondicion day"));
                    $arCuentaCobrar->setFechaVence(date_create($dateFechaVence));   
                    $arCuentaCobrar->setSaldo($arMovimiento->getTotalDebito());
                    $em->persist($arCuentaCobrar);
                    $em->flush();                    
                }                                               
                
                if($arMovimiento->getNumeroMovimiento() == 0) {
                    $arMovimiento->setNumeroMovimiento($em->getRepository('BrasaContabilidadBundle:CtbMovimientoTipo')->DevConsecutivo($arMovimiento->getCodigoMovimientoTipoFk()));
                }
            }
            
            $arMovimiento->setEstadoImpreso(1);
            $em->persist($arMovimiento);
            $em->flush();
        }
    }                   
    
    /**
     * Devuelve los movimientos contables de unos filtros
     * @param string $strCuentacodigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevMovimientosDetallesFiltro($intNroMovimiento=NULL, $strCuenta = NULL, $intCodigoTercero = NULL, $ChkFecha = NULL, $strFechaDesde = NULL, $strFechaHasta = NULL) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('mc.codigoCuentaFk, mc.credito, mc.debito, mc.base, m.numeroMovimiento, cuenta.nombreCuenta')
                ->from('BrasaContabilidadBundle:MovimientosContables', 'mc')
                ->leftJoin('mc.movimientoRel', 'm')
                ->leftJoin('mc.cuentaRel', 'cuenta');

        if ($strCuenta != Null && $strCuenta != "")
            $query->andWhere("mc.codigoCuentaFk LIKE '" . $strCuenta . "%'");

        if ($intNroMovimiento != Null && $intNroMovimiento != "")
            $query->andWhere('m.numeroMovimiento = ' . $intNroMovimiento);        
        
        if ($intCodigoTercero != Null && $intCodigoTercero != "")
            $query->andWhere('mc.codigoTerceroFk = ' . $intCodigoTercero);
        
        if ($ChkFecha != Null) {
            if ($strFechaDesde != "" && $strFechaDesde != NULL) {
                if ($strFechaHasta != "" && $strFechaHasta != NULL) {
                    $query->andWhere("mc.fecha >= '" . $strFechaDesde . " 00:00:00' AND mc.fecha <= '" . $strFechaHasta . " 23:59:59'");
                }
            }
        }

        $objQuery = $query->getQuery();
        $arMovimientosContables = new \Brasa\ContabilidadBundle\Entity\CtbMovimiento();
        $arMovimientosContables = $objQuery->getResult();

        return $arMovimientosContables;
    }       
    
    public function DevMovimientosFechaResumidoCuenta($dateFechaDesde, $dateFechaHasta) {
        $objRepositorio = $this->getEntityManager()->getRepository('BrasaContabilidadBundle:MovimientosContables');    
        $objQuery = $objRepositorio->createQueryBuilder('movimientos_contables')
                ->select('mc.codigoCuentaFk, SUM(mc.credito) AS debito, SUM(mc.debito) AS credito, SUM(mc.base) AS base')
                ->from('BrasaContabilidadBundle:MovimientosContables', 'mc')
                ->groupBy('mc.codigoCuentaFk')
                ->where('mc.fecha >= :dateFechaDesde')
                ->andWhere('mc.fecha <= :dateFechaHasta')                
                ->setParameter('dateFechaDesde', $dateFechaDesde)
                ->setParameter('dateFechaHasta', $dateFechaHasta)                
                ->getQuery();                                     
        return $objQuery->getResult();
    }      
    
    public function DevMovimientosFecha($dateFechaDesde, $dateFechaHasta) {
        $objRepositorio = $this->getEntityManager()->getRepository('BrasaContabilidadBundle:CtbMovimiento');    
        $objQuery = $objRepositorio->createQueryBuilder('mc')
            ->where('mc.fecha >= :dateFechaDesde')
            ->andWhere('mc.fecha <= :dateFechaHasta')
            ->setParameter('dateFechaDesde', $dateFechaDesde)
            ->setParameter('dateFechaHasta', $dateFechaHasta)
            ->getQuery();           
        
        return $objQuery->getResult();
    }  
    
    public function DevMovimientos($intNumero = "", $intComprobante = "", $intCentroCostos = "", $dateFechaDesde = "", $dateFechaHasta = "", $boolContabilizado = "", $strCuentaDesde = "", $strCuentaHasta = "", $strCodigoTercero) {
        $objRepositorio = $this->getEntityManager()->getRepository('BrasaContabilidadBundle:CtbMovimiento');    
        $objQuery = $objRepositorio->createQueryBuilder('mc');           
                      
        
        if($intNumero != "")
            $objQuery->andWhere ("mc.numeroMovimiento = " . $intNumero);        
        
        if($strCodigoTercero != "")
            $objQuery->andWhere ("mc.codigoTerceroFk = " . $strCodigoTercero);                        
        
        if($intComprobante != "")
            $objQuery->andWhere ("mc.codigoComprobanteContableFk = " . $intComprobante);

        if($intCentroCostos != "")
            $objQuery->andWhere ("mc.codigoCentroCostosFk = " . $intCentroCostos);        
        
        if($strCuentaDesde != "")
            $objQuery->andWhere ("mc.codigoCuentaFk >= '" . $strCuentaDesde . "'");  

        if($strCuentaHasta != "")
            $objQuery->andWhere ("mc.codigoCuentaFk <= '" . $strCuentaHasta . "'");        
        
        $objResultado = $objQuery->getQuery();        
        return $objResultado->getResult();
    }         
    
    public function DevMovimientosRetencionesResumidoTercero($dateFechaDesde, $dateFechaHasta) {
        $objRepositorio = $this->getEntityManager()->getRepository('BrasaContabilidadBundle:CtbMovimiento');    
        $objQuery = $objRepositorio->createQueryBuilder('ctb_movimientos')
                ->select('mc.codigoTerceroFk, SUM(mc.credito) AS credito, SUM(mc.debito) AS debito')
                ->from('BrasaContabilidadBundle:CtbMovimiento', 'mc')
                ->groupBy('mc.codigoTerceroFk')
                ->where('mc.fecha >= :dateFechaDesde')
                ->andWhere('mc.fecha <= :dateFechaHasta')
                ->andWhere('mc.codigoCuentaFk = :cuenta')
                ->setParameter('dateFechaDesde', $dateFechaDesde)
                ->setParameter('dateFechaHasta', $dateFechaHasta)  
                ->setParameter('cuenta', '13551501')  
                ->getQuery();                                     
        return $objQuery->getResult();
    }         
    
    public function DevMovimientosFiltro($intNroMovimiento = null, $intCodigoComprobante = null, $strFechaDesde = null, $strFechaHasta = null) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('m')
                ->from('BrasaContabilidadBundle:CtbMovimiento', 'm');

        if ($intNroMovimiento != Null && $intNroMovimiento != "")
            $query->andWhere('m.numeroMovimiento = ' . $intNroMovimiento);

        if ($intCodigoComprobante != Null && $intCodigoComprobante != "")
            $query->andWhere('m.codigoComprobanteContableFk = ' . $intCodigoComprobante);        
        
        if ($strFechaDesde != Null && $strFechaDesde != "") {
            if($strFechaHasta != Null && $strFechaHasta != "") {                
                $query->andWhere("m.fecha >= '" . $strFechaDesde . " 00:00:00' AND m.fecha <= '" . $strFechaHasta . " 23:59:59'");                                    
            }
        }

        $objQuery = $query->getQuery();
        $arMovimientos = new \Brasa\ContabilidadBundle\Entity\CtbMovimiento();
        $arMovimientos = $objQuery->getResult();

        return $arMovimientos;        
    }
    
}